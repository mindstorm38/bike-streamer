/* automatically generated by rust-bindgen 0.69.1 */

pub const VIDEO_MAX_FRAME: u32 = 32;
pub const VIDEO_MAX_PLANES: u32 = 8;
pub const V4L2_CAP_VIDEO_CAPTURE: u32 = 1;
pub const V4L2_CAP_VIDEO_OUTPUT: u32 = 2;
pub const V4L2_CAP_VIDEO_OVERLAY: u32 = 4;
pub const V4L2_CAP_VBI_CAPTURE: u32 = 16;
pub const V4L2_CAP_VBI_OUTPUT: u32 = 32;
pub const V4L2_CAP_SLICED_VBI_CAPTURE: u32 = 64;
pub const V4L2_CAP_SLICED_VBI_OUTPUT: u32 = 128;
pub const V4L2_CAP_RDS_CAPTURE: u32 = 256;
pub const V4L2_CAP_VIDEO_OUTPUT_OVERLAY: u32 = 512;
pub const V4L2_CAP_HW_FREQ_SEEK: u32 = 1024;
pub const V4L2_CAP_RDS_OUTPUT: u32 = 2048;
pub const V4L2_CAP_VIDEO_CAPTURE_MPLANE: u32 = 4096;
pub const V4L2_CAP_VIDEO_OUTPUT_MPLANE: u32 = 8192;
pub const V4L2_CAP_VIDEO_M2M_MPLANE: u32 = 16384;
pub const V4L2_CAP_VIDEO_M2M: u32 = 32768;
pub const V4L2_CAP_TUNER: u32 = 65536;
pub const V4L2_CAP_AUDIO: u32 = 131072;
pub const V4L2_CAP_RADIO: u32 = 262144;
pub const V4L2_CAP_MODULATOR: u32 = 524288;
pub const V4L2_CAP_SDR_CAPTURE: u32 = 1048576;
pub const V4L2_CAP_EXT_PIX_FORMAT: u32 = 2097152;
pub const V4L2_CAP_SDR_OUTPUT: u32 = 4194304;
pub const V4L2_CAP_META_CAPTURE: u32 = 8388608;
pub const V4L2_CAP_READWRITE: u32 = 16777216;
pub const V4L2_CAP_ASYNCIO: u32 = 33554432;
pub const V4L2_CAP_STREAMING: u32 = 67108864;
pub const V4L2_CAP_META_OUTPUT: u32 = 134217728;
pub const V4L2_CAP_TOUCH: u32 = 268435456;
pub const V4L2_CAP_IO_MC: u32 = 536870912;
pub const V4L2_CAP_DEVICE_CAPS: u32 = 2147483648;
pub const V4L2_PIX_FMT_PRIV_MAGIC: u32 = 4276996862;
pub const V4L2_PIX_FMT_FLAG_PREMUL_ALPHA: u32 = 1;
pub const V4L2_PIX_FMT_FLAG_SET_CSC: u32 = 2;
pub const V4L2_FMT_FLAG_COMPRESSED: u32 = 1;
pub const V4L2_FMT_FLAG_EMULATED: u32 = 2;
pub const V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM: u32 = 4;
pub const V4L2_FMT_FLAG_DYN_RESOLUTION: u32 = 8;
pub const V4L2_FMT_FLAG_ENC_CAP_FRAME_INTERVAL: u32 = 16;
pub const V4L2_FMT_FLAG_CSC_COLORSPACE: u32 = 32;
pub const V4L2_FMT_FLAG_CSC_XFER_FUNC: u32 = 64;
pub const V4L2_FMT_FLAG_CSC_YCBCR_ENC: u32 = 128;
pub const V4L2_FMT_FLAG_CSC_HSV_ENC: u32 = 128;
pub const V4L2_FMT_FLAG_CSC_QUANTIZATION: u32 = 256;
pub const V4L2_TC_TYPE_24FPS: u32 = 1;
pub const V4L2_TC_TYPE_25FPS: u32 = 2;
pub const V4L2_TC_TYPE_30FPS: u32 = 3;
pub const V4L2_TC_TYPE_50FPS: u32 = 4;
pub const V4L2_TC_TYPE_60FPS: u32 = 5;
pub const V4L2_TC_FLAG_DROPFRAME: u32 = 1;
pub const V4L2_TC_FLAG_COLORFRAME: u32 = 2;
pub const V4L2_TC_USERBITS_field: u32 = 12;
pub const V4L2_TC_USERBITS_USERDEFINED: u32 = 0;
pub const V4L2_TC_USERBITS_8BITCHARS: u32 = 8;
pub const V4L2_JPEG_MARKER_DHT: u32 = 8;
pub const V4L2_JPEG_MARKER_DQT: u32 = 16;
pub const V4L2_JPEG_MARKER_DRI: u32 = 32;
pub const V4L2_JPEG_MARKER_COM: u32 = 64;
pub const V4L2_JPEG_MARKER_APP: u32 = 128;
pub const V4L2_BUF_CAP_SUPPORTS_MMAP: u32 = 1;
pub const V4L2_BUF_CAP_SUPPORTS_USERPTR: u32 = 2;
pub const V4L2_BUF_CAP_SUPPORTS_DMABUF: u32 = 4;
pub const V4L2_BUF_CAP_SUPPORTS_REQUESTS: u32 = 8;
pub const V4L2_BUF_CAP_SUPPORTS_ORPHANED_BUFS: u32 = 16;
pub const V4L2_BUF_CAP_SUPPORTS_M2M_HOLD_CAPTURE_BUF: u32 = 32;
pub const V4L2_BUF_CAP_SUPPORTS_MMAP_CACHE_HINTS: u32 = 64;
pub const V4L2_BUF_FLAG_MAPPED: u32 = 1;
pub const V4L2_BUF_FLAG_QUEUED: u32 = 2;
pub const V4L2_BUF_FLAG_DONE: u32 = 4;
pub const V4L2_BUF_FLAG_KEYFRAME: u32 = 8;
pub const V4L2_BUF_FLAG_PFRAME: u32 = 16;
pub const V4L2_BUF_FLAG_BFRAME: u32 = 32;
pub const V4L2_BUF_FLAG_ERROR: u32 = 64;
pub const V4L2_BUF_FLAG_IN_REQUEST: u32 = 128;
pub const V4L2_BUF_FLAG_TIMECODE: u32 = 256;
pub const V4L2_BUF_FLAG_M2M_HOLD_CAPTURE_BUF: u32 = 512;
pub const V4L2_BUF_FLAG_PREPARED: u32 = 1024;
pub const V4L2_BUF_FLAG_NO_CACHE_INVALIDATE: u32 = 2048;
pub const V4L2_BUF_FLAG_NO_CACHE_CLEAN: u32 = 4096;
pub const V4L2_BUF_FLAG_TIMESTAMP_MASK: u32 = 57344;
pub const V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN: u32 = 0;
pub const V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC: u32 = 8192;
pub const V4L2_BUF_FLAG_TIMESTAMP_COPY: u32 = 16384;
pub const V4L2_BUF_FLAG_TSTAMP_SRC_MASK: u32 = 458752;
pub const V4L2_BUF_FLAG_TSTAMP_SRC_EOF: u32 = 0;
pub const V4L2_BUF_FLAG_TSTAMP_SRC_SOE: u32 = 65536;
pub const V4L2_BUF_FLAG_LAST: u32 = 1048576;
pub const V4L2_BUF_FLAG_REQUEST_FD: u32 = 8388608;
pub const V4L2_FBUF_CAP_EXTERNOVERLAY: u32 = 1;
pub const V4L2_FBUF_CAP_CHROMAKEY: u32 = 2;
pub const V4L2_FBUF_CAP_LIST_CLIPPING: u32 = 4;
pub const V4L2_FBUF_CAP_BITMAP_CLIPPING: u32 = 8;
pub const V4L2_FBUF_CAP_LOCAL_ALPHA: u32 = 16;
pub const V4L2_FBUF_CAP_GLOBAL_ALPHA: u32 = 32;
pub const V4L2_FBUF_CAP_LOCAL_INV_ALPHA: u32 = 64;
pub const V4L2_FBUF_CAP_SRC_CHROMAKEY: u32 = 128;
pub const V4L2_FBUF_FLAG_PRIMARY: u32 = 1;
pub const V4L2_FBUF_FLAG_OVERLAY: u32 = 2;
pub const V4L2_FBUF_FLAG_CHROMAKEY: u32 = 4;
pub const V4L2_FBUF_FLAG_LOCAL_ALPHA: u32 = 8;
pub const V4L2_FBUF_FLAG_GLOBAL_ALPHA: u32 = 16;
pub const V4L2_FBUF_FLAG_LOCAL_INV_ALPHA: u32 = 32;
pub const V4L2_FBUF_FLAG_SRC_CHROMAKEY: u32 = 64;
pub const V4L2_MODE_HIGHQUALITY: u32 = 1;
pub const V4L2_CAP_TIMEPERFRAME: u32 = 4096;
pub const V4L2_STD_UNKNOWN: u32 = 0;
pub const V4L2_DV_PROGRESSIVE: u32 = 0;
pub const V4L2_DV_INTERLACED: u32 = 1;
pub const V4L2_DV_VSYNC_POS_POL: u32 = 1;
pub const V4L2_DV_HSYNC_POS_POL: u32 = 2;
pub const V4L2_DV_BT_STD_CEA861: u32 = 1;
pub const V4L2_DV_BT_STD_DMT: u32 = 2;
pub const V4L2_DV_BT_STD_CVT: u32 = 4;
pub const V4L2_DV_BT_STD_GTF: u32 = 8;
pub const V4L2_DV_BT_STD_SDI: u32 = 16;
pub const V4L2_DV_FL_REDUCED_BLANKING: u32 = 1;
pub const V4L2_DV_FL_CAN_REDUCE_FPS: u32 = 2;
pub const V4L2_DV_FL_REDUCED_FPS: u32 = 4;
pub const V4L2_DV_FL_HALF_LINE: u32 = 8;
pub const V4L2_DV_FL_IS_CE_VIDEO: u32 = 16;
pub const V4L2_DV_FL_FIRST_FIELD_EXTRA_LINE: u32 = 32;
pub const V4L2_DV_FL_HAS_PICTURE_ASPECT: u32 = 64;
pub const V4L2_DV_FL_HAS_CEA861_VIC: u32 = 128;
pub const V4L2_DV_FL_HAS_HDMI_VIC: u32 = 256;
pub const V4L2_DV_FL_CAN_DETECT_REDUCED_FPS: u32 = 512;
pub const V4L2_DV_BT_656_1120: u32 = 0;
pub const V4L2_DV_BT_CAP_INTERLACED: u32 = 1;
pub const V4L2_DV_BT_CAP_PROGRESSIVE: u32 = 2;
pub const V4L2_DV_BT_CAP_REDUCED_BLANKING: u32 = 4;
pub const V4L2_DV_BT_CAP_CUSTOM: u32 = 8;
pub const V4L2_INPUT_TYPE_TUNER: u32 = 1;
pub const V4L2_INPUT_TYPE_CAMERA: u32 = 2;
pub const V4L2_INPUT_TYPE_TOUCH: u32 = 3;
pub const V4L2_IN_ST_NO_POWER: u32 = 1;
pub const V4L2_IN_ST_NO_SIGNAL: u32 = 2;
pub const V4L2_IN_ST_NO_COLOR: u32 = 4;
pub const V4L2_IN_ST_HFLIP: u32 = 16;
pub const V4L2_IN_ST_VFLIP: u32 = 32;
pub const V4L2_IN_ST_NO_H_LOCK: u32 = 256;
pub const V4L2_IN_ST_COLOR_KILL: u32 = 512;
pub const V4L2_IN_ST_NO_V_LOCK: u32 = 1024;
pub const V4L2_IN_ST_NO_STD_LOCK: u32 = 2048;
pub const V4L2_IN_ST_NO_SYNC: u32 = 65536;
pub const V4L2_IN_ST_NO_EQU: u32 = 131072;
pub const V4L2_IN_ST_NO_CARRIER: u32 = 262144;
pub const V4L2_IN_ST_MACROVISION: u32 = 16777216;
pub const V4L2_IN_ST_NO_ACCESS: u32 = 33554432;
pub const V4L2_IN_ST_VTR: u32 = 67108864;
pub const V4L2_IN_CAP_DV_TIMINGS: u32 = 2;
pub const V4L2_IN_CAP_CUSTOM_TIMINGS: u32 = 2;
pub const V4L2_IN_CAP_STD: u32 = 4;
pub const V4L2_IN_CAP_NATIVE_SIZE: u32 = 8;
pub const V4L2_OUTPUT_TYPE_MODULATOR: u32 = 1;
pub const V4L2_OUTPUT_TYPE_ANALOG: u32 = 2;
pub const V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY: u32 = 3;
pub const V4L2_OUT_CAP_DV_TIMINGS: u32 = 2;
pub const V4L2_OUT_CAP_CUSTOM_TIMINGS: u32 = 2;
pub const V4L2_OUT_CAP_STD: u32 = 4;
pub const V4L2_OUT_CAP_NATIVE_SIZE: u32 = 8;
pub const V4L2_CTRL_ID_MASK: u32 = 268435455;
pub const V4L2_CTRL_MAX_DIMS: u32 = 4;
pub const V4L2_CTRL_WHICH_CUR_VAL: u32 = 0;
pub const V4L2_CTRL_WHICH_DEF_VAL: u32 = 251658240;
pub const V4L2_CTRL_WHICH_REQUEST_VAL: u32 = 251723776;
pub const V4L2_CTRL_FLAG_DISABLED: u32 = 1;
pub const V4L2_CTRL_FLAG_GRABBED: u32 = 2;
pub const V4L2_CTRL_FLAG_READ_ONLY: u32 = 4;
pub const V4L2_CTRL_FLAG_UPDATE: u32 = 8;
pub const V4L2_CTRL_FLAG_INACTIVE: u32 = 16;
pub const V4L2_CTRL_FLAG_SLIDER: u32 = 32;
pub const V4L2_CTRL_FLAG_WRITE_ONLY: u32 = 64;
pub const V4L2_CTRL_FLAG_VOLATILE: u32 = 128;
pub const V4L2_CTRL_FLAG_HAS_PAYLOAD: u32 = 256;
pub const V4L2_CTRL_FLAG_EXECUTE_ON_WRITE: u32 = 512;
pub const V4L2_CTRL_FLAG_MODIFY_LAYOUT: u32 = 1024;
pub const V4L2_CTRL_FLAG_NEXT_CTRL: u32 = 2147483648;
pub const V4L2_CTRL_FLAG_NEXT_COMPOUND: u32 = 1073741824;
pub const V4L2_CID_MAX_CTRLS: u32 = 1024;
pub const V4L2_CID_PRIVATE_BASE: u32 = 134217728;
pub const V4L2_TUNER_CAP_LOW: u32 = 1;
pub const V4L2_TUNER_CAP_NORM: u32 = 2;
pub const V4L2_TUNER_CAP_HWSEEK_BOUNDED: u32 = 4;
pub const V4L2_TUNER_CAP_HWSEEK_WRAP: u32 = 8;
pub const V4L2_TUNER_CAP_STEREO: u32 = 16;
pub const V4L2_TUNER_CAP_LANG2: u32 = 32;
pub const V4L2_TUNER_CAP_SAP: u32 = 32;
pub const V4L2_TUNER_CAP_LANG1: u32 = 64;
pub const V4L2_TUNER_CAP_RDS: u32 = 128;
pub const V4L2_TUNER_CAP_RDS_BLOCK_IO: u32 = 256;
pub const V4L2_TUNER_CAP_RDS_CONTROLS: u32 = 512;
pub const V4L2_TUNER_CAP_FREQ_BANDS: u32 = 1024;
pub const V4L2_TUNER_CAP_HWSEEK_PROG_LIM: u32 = 2048;
pub const V4L2_TUNER_CAP_1HZ: u32 = 4096;
pub const V4L2_TUNER_SUB_MONO: u32 = 1;
pub const V4L2_TUNER_SUB_STEREO: u32 = 2;
pub const V4L2_TUNER_SUB_LANG2: u32 = 4;
pub const V4L2_TUNER_SUB_SAP: u32 = 4;
pub const V4L2_TUNER_SUB_LANG1: u32 = 8;
pub const V4L2_TUNER_SUB_RDS: u32 = 16;
pub const V4L2_TUNER_MODE_MONO: u32 = 0;
pub const V4L2_TUNER_MODE_STEREO: u32 = 1;
pub const V4L2_TUNER_MODE_LANG2: u32 = 2;
pub const V4L2_TUNER_MODE_SAP: u32 = 2;
pub const V4L2_TUNER_MODE_LANG1: u32 = 3;
pub const V4L2_TUNER_MODE_LANG1_LANG2: u32 = 4;
pub const V4L2_BAND_MODULATION_VSB: u32 = 2;
pub const V4L2_BAND_MODULATION_FM: u32 = 4;
pub const V4L2_BAND_MODULATION_AM: u32 = 8;
pub const V4L2_RDS_BLOCK_MSK: u32 = 7;
pub const V4L2_RDS_BLOCK_A: u32 = 0;
pub const V4L2_RDS_BLOCK_B: u32 = 1;
pub const V4L2_RDS_BLOCK_C: u32 = 2;
pub const V4L2_RDS_BLOCK_D: u32 = 3;
pub const V4L2_RDS_BLOCK_C_ALT: u32 = 4;
pub const V4L2_RDS_BLOCK_INVALID: u32 = 7;
pub const V4L2_RDS_BLOCK_CORRECTED: u32 = 64;
pub const V4L2_RDS_BLOCK_ERROR: u32 = 128;
pub const V4L2_AUDCAP_STEREO: u32 = 1;
pub const V4L2_AUDCAP_AVL: u32 = 2;
pub const V4L2_AUDMODE_AVL: u32 = 1;
pub const V4L2_ENC_IDX_FRAME_I: u32 = 0;
pub const V4L2_ENC_IDX_FRAME_P: u32 = 1;
pub const V4L2_ENC_IDX_FRAME_B: u32 = 2;
pub const V4L2_ENC_IDX_FRAME_MASK: u32 = 15;
pub const V4L2_ENC_IDX_ENTRIES: u32 = 64;
pub const V4L2_ENC_CMD_START: u32 = 0;
pub const V4L2_ENC_CMD_STOP: u32 = 1;
pub const V4L2_ENC_CMD_PAUSE: u32 = 2;
pub const V4L2_ENC_CMD_RESUME: u32 = 3;
pub const V4L2_ENC_CMD_STOP_AT_GOP_END: u32 = 1;
pub const V4L2_DEC_CMD_START: u32 = 0;
pub const V4L2_DEC_CMD_STOP: u32 = 1;
pub const V4L2_DEC_CMD_PAUSE: u32 = 2;
pub const V4L2_DEC_CMD_RESUME: u32 = 3;
pub const V4L2_DEC_CMD_FLUSH: u32 = 4;
pub const V4L2_DEC_CMD_START_MUTE_AUDIO: u32 = 1;
pub const V4L2_DEC_CMD_PAUSE_TO_BLACK: u32 = 1;
pub const V4L2_DEC_CMD_STOP_TO_BLACK: u32 = 1;
pub const V4L2_DEC_CMD_STOP_IMMEDIATELY: u32 = 2;
pub const V4L2_DEC_START_FMT_NONE: u32 = 0;
pub const V4L2_DEC_START_FMT_GOP: u32 = 1;
pub const V4L2_VBI_UNSYNC: u32 = 1;
pub const V4L2_VBI_INTERLACED: u32 = 2;
pub const V4L2_VBI_ITU_525_F1_START: u32 = 1;
pub const V4L2_VBI_ITU_525_F2_START: u32 = 264;
pub const V4L2_VBI_ITU_625_F1_START: u32 = 1;
pub const V4L2_VBI_ITU_625_F2_START: u32 = 314;
pub const V4L2_SLICED_TELETEXT_B: u32 = 1;
pub const V4L2_SLICED_VPS: u32 = 1024;
pub const V4L2_SLICED_CAPTION_525: u32 = 4096;
pub const V4L2_SLICED_WSS_625: u32 = 16384;
pub const V4L2_SLICED_VBI_525: u32 = 4096;
pub const V4L2_SLICED_VBI_625: u32 = 17409;
pub const V4L2_MPEG_VBI_IVTV_TELETEXT_B: u32 = 1;
pub const V4L2_MPEG_VBI_IVTV_CAPTION_525: u32 = 4;
pub const V4L2_MPEG_VBI_IVTV_WSS_625: u32 = 5;
pub const V4L2_MPEG_VBI_IVTV_VPS: u32 = 7;
pub const V4L2_MPEG_VBI_IVTV_MAGIC0: &[u8; 5] = b"itv0\0";
pub const V4L2_MPEG_VBI_IVTV_MAGIC1: &[u8; 5] = b"ITV0\0";
pub const V4L2_EVENT_ALL: u32 = 0;
pub const V4L2_EVENT_VSYNC: u32 = 1;
pub const V4L2_EVENT_EOS: u32 = 2;
pub const V4L2_EVENT_CTRL: u32 = 3;
pub const V4L2_EVENT_FRAME_SYNC: u32 = 4;
pub const V4L2_EVENT_SOURCE_CHANGE: u32 = 5;
pub const V4L2_EVENT_MOTION_DET: u32 = 6;
pub const V4L2_EVENT_PRIVATE_START: u32 = 134217728;
pub const V4L2_EVENT_CTRL_CH_VALUE: u32 = 1;
pub const V4L2_EVENT_CTRL_CH_FLAGS: u32 = 2;
pub const V4L2_EVENT_CTRL_CH_RANGE: u32 = 4;
pub const V4L2_EVENT_SRC_CH_RESOLUTION: u32 = 1;
pub const V4L2_EVENT_MD_FL_HAVE_FRAME_SEQ: u32 = 1;
pub const V4L2_EVENT_SUB_FL_SEND_INITIAL: u32 = 1;
pub const V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK: u32 = 2;
pub const V4L2_CHIP_MATCH_BRIDGE: u32 = 0;
pub const V4L2_CHIP_MATCH_SUBDEV: u32 = 4;
pub const V4L2_CHIP_MATCH_HOST: u32 = 0;
pub const V4L2_CHIP_MATCH_I2C_DRIVER: u32 = 1;
pub const V4L2_CHIP_MATCH_I2C_ADDR: u32 = 2;
pub const V4L2_CHIP_MATCH_AC97: u32 = 3;
pub const V4L2_CHIP_FL_READABLE: u32 = 1;
pub const V4L2_CHIP_FL_WRITABLE: u32 = 2;
pub const BASE_VIDIOC_PRIVATE: u32 = 192;
pub type __time_t = ::std::os::raw::c_long;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type __le32 = __u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_sps {
    pub profile_idc: __u8,
    pub constraint_set_flags: __u8,
    pub level_idc: __u8,
    pub seq_parameter_set_id: __u8,
    pub chroma_format_idc: __u8,
    pub bit_depth_luma_minus8: __u8,
    pub bit_depth_chroma_minus8: __u8,
    pub log2_max_frame_num_minus4: __u8,
    pub pic_order_cnt_type: __u8,
    pub log2_max_pic_order_cnt_lsb_minus4: __u8,
    pub max_num_ref_frames: __u8,
    pub num_ref_frames_in_pic_order_cnt_cycle: __u8,
    pub offset_for_ref_frame: [__s32; 255usize],
    pub offset_for_non_ref_pic: __s32,
    pub offset_for_top_to_bottom_field: __s32,
    pub pic_width_in_mbs_minus1: __u16,
    pub pic_height_in_map_units_minus1: __u16,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_ctrl_h264_sps() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ctrl_h264_sps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ctrl_h264_sps>(),
        1048usize,
        concat!("Size of: ", stringify!(v4l2_ctrl_h264_sps))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ctrl_h264_sps>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_ctrl_h264_sps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile_idc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(profile_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constraint_set_flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(constraint_set_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level_idc) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(level_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_parameter_set_id) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(seq_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chroma_format_idc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(chroma_format_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_depth_luma_minus8) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(bit_depth_luma_minus8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_depth_chroma_minus8) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(bit_depth_chroma_minus8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log2_max_frame_num_minus4) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(log2_max_frame_num_minus4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_order_cnt_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(pic_order_cnt_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_max_pic_order_cnt_lsb_minus4) as usize - ptr as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(log2_max_pic_order_cnt_lsb_minus4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_num_ref_frames) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(max_num_ref_frames)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ref_frames_in_pic_order_cnt_cycle) as usize
                - ptr as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(num_ref_frames_in_pic_order_cnt_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_for_ref_frame) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(offset_for_ref_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_for_non_ref_pic) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(offset_for_non_ref_pic)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).offset_for_top_to_bottom_field) as usize - ptr as usize
        },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(offset_for_top_to_bottom_field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_width_in_mbs_minus1) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(pic_width_in_mbs_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pic_height_in_map_units_minus1) as usize - ptr as usize
        },
        1042usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(pic_height_in_map_units_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        1044usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_sps),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_pps {
    pub pic_parameter_set_id: __u8,
    pub seq_parameter_set_id: __u8,
    pub num_slice_groups_minus1: __u8,
    pub num_ref_idx_l0_default_active_minus1: __u8,
    pub num_ref_idx_l1_default_active_minus1: __u8,
    pub weighted_bipred_idc: __u8,
    pub pic_init_qp_minus26: __s8,
    pub pic_init_qs_minus26: __s8,
    pub chroma_qp_index_offset: __s8,
    pub second_chroma_qp_index_offset: __s8,
    pub flags: __u16,
}
#[test]
fn bindgen_test_layout_v4l2_ctrl_h264_pps() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ctrl_h264_pps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ctrl_h264_pps>(),
        12usize,
        concat!("Size of: ", stringify!(v4l2_ctrl_h264_pps))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ctrl_h264_pps>(),
        2usize,
        concat!("Alignment of ", stringify!(v4l2_ctrl_h264_pps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_parameter_set_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pps),
            "::",
            stringify!(pic_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_parameter_set_id) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pps),
            "::",
            stringify!(seq_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_slice_groups_minus1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pps),
            "::",
            stringify!(num_slice_groups_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ref_idx_l0_default_active_minus1) as usize
                - ptr as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pps),
            "::",
            stringify!(num_ref_idx_l0_default_active_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ref_idx_l1_default_active_minus1) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pps),
            "::",
            stringify!(num_ref_idx_l1_default_active_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weighted_bipred_idc) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pps),
            "::",
            stringify!(weighted_bipred_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_init_qp_minus26) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pps),
            "::",
            stringify!(pic_init_qp_minus26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_init_qs_minus26) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pps),
            "::",
            stringify!(pic_init_qs_minus26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chroma_qp_index_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pps),
            "::",
            stringify!(chroma_qp_index_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).second_chroma_qp_index_offset) as usize - ptr as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pps),
            "::",
            stringify!(second_chroma_qp_index_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pps),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_scaling_matrix {
    pub scaling_list_4x4: [[__u8; 16usize]; 6usize],
    pub scaling_list_8x8: [[__u8; 64usize]; 6usize],
}
#[test]
fn bindgen_test_layout_v4l2_ctrl_h264_scaling_matrix() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ctrl_h264_scaling_matrix> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ctrl_h264_scaling_matrix>(),
        480usize,
        concat!("Size of: ", stringify!(v4l2_ctrl_h264_scaling_matrix))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ctrl_h264_scaling_matrix>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_ctrl_h264_scaling_matrix))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scaling_list_4x4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_scaling_matrix),
            "::",
            stringify!(scaling_list_4x4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scaling_list_8x8) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_scaling_matrix),
            "::",
            stringify!(scaling_list_8x8)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_h264_weight_factors {
    pub luma_weight: [__s16; 32usize],
    pub luma_offset: [__s16; 32usize],
    pub chroma_weight: [[__s16; 2usize]; 32usize],
    pub chroma_offset: [[__s16; 2usize]; 32usize],
}
#[test]
fn bindgen_test_layout_v4l2_h264_weight_factors() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_h264_weight_factors> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_h264_weight_factors>(),
        384usize,
        concat!("Size of: ", stringify!(v4l2_h264_weight_factors))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_h264_weight_factors>(),
        2usize,
        concat!("Alignment of ", stringify!(v4l2_h264_weight_factors))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luma_weight) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_weight_factors),
            "::",
            stringify!(luma_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luma_offset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_weight_factors),
            "::",
            stringify!(luma_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chroma_weight) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_weight_factors),
            "::",
            stringify!(chroma_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chroma_offset) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_weight_factors),
            "::",
            stringify!(chroma_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_pred_weights {
    pub luma_log2_weight_denom: __u16,
    pub chroma_log2_weight_denom: __u16,
    pub weight_factors: [v4l2_h264_weight_factors; 2usize],
}
#[test]
fn bindgen_test_layout_v4l2_ctrl_h264_pred_weights() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ctrl_h264_pred_weights> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ctrl_h264_pred_weights>(),
        772usize,
        concat!("Size of: ", stringify!(v4l2_ctrl_h264_pred_weights))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ctrl_h264_pred_weights>(),
        2usize,
        concat!("Alignment of ", stringify!(v4l2_ctrl_h264_pred_weights))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luma_log2_weight_denom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pred_weights),
            "::",
            stringify!(luma_log2_weight_denom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chroma_log2_weight_denom) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pred_weights),
            "::",
            stringify!(chroma_log2_weight_denom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight_factors) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_pred_weights),
            "::",
            stringify!(weight_factors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_h264_reference {
    pub fields: __u8,
    pub index: __u8,
}
#[test]
fn bindgen_test_layout_v4l2_h264_reference() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_h264_reference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_h264_reference>(),
        2usize,
        concat!("Size of: ", stringify!(v4l2_h264_reference))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_h264_reference>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_h264_reference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_reference),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_reference),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_slice_params {
    pub header_bit_size: __u32,
    pub first_mb_in_slice: __u32,
    pub slice_type: __u8,
    pub colour_plane_id: __u8,
    pub redundant_pic_cnt: __u8,
    pub cabac_init_idc: __u8,
    pub slice_qp_delta: __s8,
    pub slice_qs_delta: __s8,
    pub disable_deblocking_filter_idc: __u8,
    pub slice_alpha_c0_offset_div2: __s8,
    pub slice_beta_offset_div2: __s8,
    pub num_ref_idx_l0_active_minus1: __u8,
    pub num_ref_idx_l1_active_minus1: __u8,
    pub reserved: __u8,
    pub ref_pic_list0: [v4l2_h264_reference; 32usize],
    pub ref_pic_list1: [v4l2_h264_reference; 32usize],
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_ctrl_h264_slice_params() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ctrl_h264_slice_params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ctrl_h264_slice_params>(),
        152usize,
        concat!("Size of: ", stringify!(v4l2_ctrl_h264_slice_params))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ctrl_h264_slice_params>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_ctrl_h264_slice_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_bit_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(header_bit_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_mb_in_slice) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(first_mb_in_slice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(slice_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colour_plane_id) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(colour_plane_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redundant_pic_cnt) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(redundant_pic_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cabac_init_idc) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(cabac_init_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_qp_delta) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(slice_qp_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_qs_delta) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(slice_qs_delta)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).disable_deblocking_filter_idc) as usize - ptr as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(disable_deblocking_filter_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_alpha_c0_offset_div2) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(slice_alpha_c0_offset_div2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_beta_offset_div2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(slice_beta_offset_div2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ref_idx_l0_active_minus1) as usize - ptr as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(num_ref_idx_l0_active_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ref_idx_l1_active_minus1) as usize - ptr as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(num_ref_idx_l1_active_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_pic_list0) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(ref_pic_list0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_pic_list1) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(ref_pic_list1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_slice_params),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_h264_dpb_entry {
    pub reference_ts: __u64,
    pub pic_num: __u32,
    pub frame_num: __u16,
    pub fields: __u8,
    pub reserved: [__u8; 5usize],
    pub top_field_order_cnt: __s32,
    pub bottom_field_order_cnt: __s32,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_h264_dpb_entry() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_h264_dpb_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_h264_dpb_entry>(),
        32usize,
        concat!("Size of: ", stringify!(v4l2_h264_dpb_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_h264_dpb_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_h264_dpb_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_dpb_entry),
            "::",
            stringify!(reference_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_dpb_entry),
            "::",
            stringify!(pic_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_num) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_dpb_entry),
            "::",
            stringify!(frame_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_dpb_entry),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_dpb_entry),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_field_order_cnt) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_dpb_entry),
            "::",
            stringify!(top_field_order_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom_field_order_cnt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_dpb_entry),
            "::",
            stringify!(bottom_field_order_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_h264_dpb_entry),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_decode_params {
    pub dpb: [v4l2_h264_dpb_entry; 16usize],
    pub nal_ref_idc: __u16,
    pub frame_num: __u16,
    pub top_field_order_cnt: __s32,
    pub bottom_field_order_cnt: __s32,
    pub idr_pic_id: __u16,
    pub pic_order_cnt_lsb: __u16,
    pub delta_pic_order_cnt_bottom: __s32,
    pub delta_pic_order_cnt0: __s32,
    pub delta_pic_order_cnt1: __s32,
    pub dec_ref_pic_marking_bit_size: __u32,
    pub pic_order_cnt_bit_size: __u32,
    pub slice_group_change_cycle: __u32,
    pub reserved: __u32,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_ctrl_h264_decode_params() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ctrl_h264_decode_params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ctrl_h264_decode_params>(),
        560usize,
        concat!("Size of: ", stringify!(v4l2_ctrl_h264_decode_params))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ctrl_h264_decode_params>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_ctrl_h264_decode_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(dpb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nal_ref_idc) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(nal_ref_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_num) as usize - ptr as usize },
        514usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(frame_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_field_order_cnt) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(top_field_order_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom_field_order_cnt) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(bottom_field_order_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idr_pic_id) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(idr_pic_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_order_cnt_lsb) as usize - ptr as usize },
        526usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(pic_order_cnt_lsb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta_pic_order_cnt_bottom) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(delta_pic_order_cnt_bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta_pic_order_cnt0) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(delta_pic_order_cnt0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta_pic_order_cnt1) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(delta_pic_order_cnt1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dec_ref_pic_marking_bit_size) as usize - ptr as usize
        },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(dec_ref_pic_marking_bit_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_order_cnt_bit_size) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(pic_order_cnt_bit_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_group_change_cycle) as usize - ptr as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(slice_group_change_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_h264_decode_params),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_fwht_params {
    pub backward_ref_ts: __u64,
    pub version: __u32,
    pub width: __u32,
    pub height: __u32,
    pub flags: __u32,
    pub colorspace: __u32,
    pub xfer_func: __u32,
    pub ycbcr_enc: __u32,
    pub quantization: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_ctrl_fwht_params() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ctrl_fwht_params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ctrl_fwht_params>(),
        40usize,
        concat!("Size of: ", stringify!(v4l2_ctrl_fwht_params))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ctrl_fwht_params>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_ctrl_fwht_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backward_ref_ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_fwht_params),
            "::",
            stringify!(backward_ref_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_fwht_params),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_fwht_params),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_fwht_params),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_fwht_params),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorspace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_fwht_params),
            "::",
            stringify!(colorspace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xfer_func) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_fwht_params),
            "::",
            stringify!(xfer_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ycbcr_enc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_fwht_params),
            "::",
            stringify!(ycbcr_enc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantization) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_fwht_params),
            "::",
            stringify!(quantization)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vp8_segment {
    pub quant_update: [__s8; 4usize],
    pub lf_update: [__s8; 4usize],
    pub segment_probs: [__u8; 3usize],
    pub padding: __u8,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_vp8_segment() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_vp8_segment> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_vp8_segment>(),
        16usize,
        concat!("Size of: ", stringify!(v4l2_vp8_segment))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_vp8_segment>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_vp8_segment))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quant_update) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_segment),
            "::",
            stringify!(quant_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lf_update) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_segment),
            "::",
            stringify!(lf_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segment_probs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_segment),
            "::",
            stringify!(segment_probs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_segment),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_segment),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vp8_loop_filter {
    pub ref_frm_delta: [__s8; 4usize],
    pub mb_mode_delta: [__s8; 4usize],
    pub sharpness_level: __u8,
    pub level: __u8,
    pub padding: __u16,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_vp8_loop_filter() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_vp8_loop_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_vp8_loop_filter>(),
        16usize,
        concat!("Size of: ", stringify!(v4l2_vp8_loop_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_vp8_loop_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_vp8_loop_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_frm_delta) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_loop_filter),
            "::",
            stringify!(ref_frm_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mb_mode_delta) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_loop_filter),
            "::",
            stringify!(mb_mode_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharpness_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_loop_filter),
            "::",
            stringify!(sharpness_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_loop_filter),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_loop_filter),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_loop_filter),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vp8_quantization {
    pub y_ac_qi: __u8,
    pub y_dc_delta: __s8,
    pub y2_dc_delta: __s8,
    pub y2_ac_delta: __s8,
    pub uv_dc_delta: __s8,
    pub uv_ac_delta: __s8,
    pub padding: __u16,
}
#[test]
fn bindgen_test_layout_v4l2_vp8_quantization() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_vp8_quantization> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_vp8_quantization>(),
        8usize,
        concat!("Size of: ", stringify!(v4l2_vp8_quantization))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_vp8_quantization>(),
        2usize,
        concat!("Alignment of ", stringify!(v4l2_vp8_quantization))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_ac_qi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_quantization),
            "::",
            stringify!(y_ac_qi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_dc_delta) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_quantization),
            "::",
            stringify!(y_dc_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y2_dc_delta) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_quantization),
            "::",
            stringify!(y2_dc_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y2_ac_delta) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_quantization),
            "::",
            stringify!(y2_ac_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv_dc_delta) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_quantization),
            "::",
            stringify!(uv_dc_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv_ac_delta) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_quantization),
            "::",
            stringify!(uv_ac_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_quantization),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vp8_entropy {
    pub coeff_probs: [[[[__u8; 11usize]; 3usize]; 8usize]; 4usize],
    pub y_mode_probs: [__u8; 4usize],
    pub uv_mode_probs: [__u8; 3usize],
    pub mv_probs: [[__u8; 19usize]; 2usize],
    pub padding: [__u8; 3usize],
}
#[test]
fn bindgen_test_layout_v4l2_vp8_entropy() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_vp8_entropy> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_vp8_entropy>(),
        1104usize,
        concat!("Size of: ", stringify!(v4l2_vp8_entropy))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_vp8_entropy>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_vp8_entropy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coeff_probs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_entropy),
            "::",
            stringify!(coeff_probs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_mode_probs) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_entropy),
            "::",
            stringify!(y_mode_probs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv_mode_probs) as usize - ptr as usize },
        1060usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_entropy),
            "::",
            stringify!(uv_mode_probs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_probs) as usize - ptr as usize },
        1063usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_entropy),
            "::",
            stringify!(mv_probs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        1101usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_entropy),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vp8_entropy_coder_state {
    pub range: __u8,
    pub value: __u8,
    pub bit_count: __u8,
    pub padding: __u8,
}
#[test]
fn bindgen_test_layout_v4l2_vp8_entropy_coder_state() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_vp8_entropy_coder_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_vp8_entropy_coder_state>(),
        4usize,
        concat!("Size of: ", stringify!(v4l2_vp8_entropy_coder_state))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_vp8_entropy_coder_state>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_vp8_entropy_coder_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_entropy_coder_state),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_entropy_coder_state),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_count) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_entropy_coder_state),
            "::",
            stringify!(bit_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vp8_entropy_coder_state),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_vp8_frame {
    pub segment: v4l2_vp8_segment,
    pub lf: v4l2_vp8_loop_filter,
    pub quant: v4l2_vp8_quantization,
    pub entropy: v4l2_vp8_entropy,
    pub coder_state: v4l2_vp8_entropy_coder_state,
    pub width: __u16,
    pub height: __u16,
    pub horizontal_scale: __u8,
    pub vertical_scale: __u8,
    pub version: __u8,
    pub prob_skip_false: __u8,
    pub prob_intra: __u8,
    pub prob_last: __u8,
    pub prob_gf: __u8,
    pub num_dct_parts: __u8,
    pub first_part_size: __u32,
    pub first_part_header_bits: __u32,
    pub dct_part_sizes: [__u32; 8usize],
    pub last_frame_ts: __u64,
    pub golden_frame_ts: __u64,
    pub alt_frame_ts: __u64,
    pub flags: __u64,
}
#[test]
fn bindgen_test_layout_v4l2_ctrl_vp8_frame() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ctrl_vp8_frame> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ctrl_vp8_frame>(),
        1232usize,
        concat!("Size of: ", stringify!(v4l2_ctrl_vp8_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ctrl_vp8_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_ctrl_vp8_frame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segment) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(segment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(lf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quant) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(quant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entropy) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(entropy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coder_state) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(coder_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        1148usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        1150usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horizontal_scale) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(horizontal_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertical_scale) as usize - ptr as usize },
        1153usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(vertical_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        1154usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prob_skip_false) as usize - ptr as usize },
        1155usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(prob_skip_false)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prob_intra) as usize - ptr as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(prob_intra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prob_last) as usize - ptr as usize },
        1157usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(prob_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prob_gf) as usize - ptr as usize },
        1158usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(prob_gf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_dct_parts) as usize - ptr as usize },
        1159usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(num_dct_parts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_part_size) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(first_part_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_part_header_bits) as usize - ptr as usize },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(first_part_header_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dct_part_sizes) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(dct_part_sizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_frame_ts) as usize - ptr as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(last_frame_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).golden_frame_ts) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(golden_frame_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_frame_ts) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(alt_frame_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_vp8_frame),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_mpeg2_sequence {
    pub horizontal_size: __u16,
    pub vertical_size: __u16,
    pub vbv_buffer_size: __u32,
    pub profile_and_level_indication: __u16,
    pub chroma_format: __u8,
    pub flags: __u8,
}
#[test]
fn bindgen_test_layout_v4l2_ctrl_mpeg2_sequence() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ctrl_mpeg2_sequence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ctrl_mpeg2_sequence>(),
        12usize,
        concat!("Size of: ", stringify!(v4l2_ctrl_mpeg2_sequence))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ctrl_mpeg2_sequence>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_ctrl_mpeg2_sequence))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horizontal_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_sequence),
            "::",
            stringify!(horizontal_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertical_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_sequence),
            "::",
            stringify!(vertical_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vbv_buffer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_sequence),
            "::",
            stringify!(vbv_buffer_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).profile_and_level_indication) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_sequence),
            "::",
            stringify!(profile_and_level_indication)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chroma_format) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_sequence),
            "::",
            stringify!(chroma_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_sequence),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_mpeg2_picture {
    pub backward_ref_ts: __u64,
    pub forward_ref_ts: __u64,
    pub flags: __u32,
    pub f_code: [[__u8; 2usize]; 2usize],
    pub picture_coding_type: __u8,
    pub picture_structure: __u8,
    pub intra_dc_precision: __u8,
    pub reserved: [__u8; 5usize],
}
#[test]
fn bindgen_test_layout_v4l2_ctrl_mpeg2_picture() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ctrl_mpeg2_picture> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ctrl_mpeg2_picture>(),
        32usize,
        concat!("Size of: ", stringify!(v4l2_ctrl_mpeg2_picture))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ctrl_mpeg2_picture>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_ctrl_mpeg2_picture))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backward_ref_ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_picture),
            "::",
            stringify!(backward_ref_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_ref_ts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_picture),
            "::",
            stringify!(forward_ref_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_picture),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_code) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_picture),
            "::",
            stringify!(f_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).picture_coding_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_picture),
            "::",
            stringify!(picture_coding_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).picture_structure) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_picture),
            "::",
            stringify!(picture_structure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intra_dc_precision) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_picture),
            "::",
            stringify!(intra_dc_precision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_picture),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_mpeg2_quantisation {
    pub intra_quantiser_matrix: [__u8; 64usize],
    pub non_intra_quantiser_matrix: [__u8; 64usize],
    pub chroma_intra_quantiser_matrix: [__u8; 64usize],
    pub chroma_non_intra_quantiser_matrix: [__u8; 64usize],
}
#[test]
fn bindgen_test_layout_v4l2_ctrl_mpeg2_quantisation() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ctrl_mpeg2_quantisation> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ctrl_mpeg2_quantisation>(),
        256usize,
        concat!("Size of: ", stringify!(v4l2_ctrl_mpeg2_quantisation))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ctrl_mpeg2_quantisation>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_ctrl_mpeg2_quantisation))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intra_quantiser_matrix) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_quantisation),
            "::",
            stringify!(intra_quantiser_matrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).non_intra_quantiser_matrix) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_quantisation),
            "::",
            stringify!(non_intra_quantiser_matrix)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chroma_intra_quantiser_matrix) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_quantisation),
            "::",
            stringify!(chroma_intra_quantiser_matrix)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chroma_non_intra_quantiser_matrix) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ctrl_mpeg2_quantisation),
            "::",
            stringify!(chroma_non_intra_quantiser_matrix)
        )
    );
}
pub const v4l2_field_V4L2_FIELD_ANY: v4l2_field = 0;
pub const v4l2_field_V4L2_FIELD_NONE: v4l2_field = 1;
pub const v4l2_field_V4L2_FIELD_TOP: v4l2_field = 2;
pub const v4l2_field_V4L2_FIELD_BOTTOM: v4l2_field = 3;
pub const v4l2_field_V4L2_FIELD_INTERLACED: v4l2_field = 4;
pub const v4l2_field_V4L2_FIELD_SEQ_TB: v4l2_field = 5;
pub const v4l2_field_V4L2_FIELD_SEQ_BT: v4l2_field = 6;
pub const v4l2_field_V4L2_FIELD_ALTERNATE: v4l2_field = 7;
pub const v4l2_field_V4L2_FIELD_INTERLACED_TB: v4l2_field = 8;
pub const v4l2_field_V4L2_FIELD_INTERLACED_BT: v4l2_field = 9;
pub type v4l2_field = ::std::os::raw::c_uint;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_CAPTURE: v4l2_buf_type = 1;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_OUTPUT: v4l2_buf_type = 2;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_OVERLAY: v4l2_buf_type = 3;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VBI_CAPTURE: v4l2_buf_type = 4;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VBI_OUTPUT: v4l2_buf_type = 5;
pub const v4l2_buf_type_V4L2_BUF_TYPE_SLICED_VBI_CAPTURE: v4l2_buf_type = 6;
pub const v4l2_buf_type_V4L2_BUF_TYPE_SLICED_VBI_OUTPUT: v4l2_buf_type = 7;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY: v4l2_buf_type = 8;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE: v4l2_buf_type = 9;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE: v4l2_buf_type = 10;
pub const v4l2_buf_type_V4L2_BUF_TYPE_SDR_CAPTURE: v4l2_buf_type = 11;
pub const v4l2_buf_type_V4L2_BUF_TYPE_SDR_OUTPUT: v4l2_buf_type = 12;
pub const v4l2_buf_type_V4L2_BUF_TYPE_META_CAPTURE: v4l2_buf_type = 13;
pub const v4l2_buf_type_V4L2_BUF_TYPE_META_OUTPUT: v4l2_buf_type = 14;
pub const v4l2_buf_type_V4L2_BUF_TYPE_PRIVATE: v4l2_buf_type = 128;
pub type v4l2_buf_type = ::std::os::raw::c_uint;
pub const v4l2_tuner_type_V4L2_TUNER_RADIO: v4l2_tuner_type = 1;
pub const v4l2_tuner_type_V4L2_TUNER_ANALOG_TV: v4l2_tuner_type = 2;
pub const v4l2_tuner_type_V4L2_TUNER_DIGITAL_TV: v4l2_tuner_type = 3;
pub const v4l2_tuner_type_V4L2_TUNER_SDR: v4l2_tuner_type = 4;
pub const v4l2_tuner_type_V4L2_TUNER_RF: v4l2_tuner_type = 5;
pub type v4l2_tuner_type = ::std::os::raw::c_uint;
pub const v4l2_memory_V4L2_MEMORY_MMAP: v4l2_memory = 1;
pub const v4l2_memory_V4L2_MEMORY_USERPTR: v4l2_memory = 2;
pub const v4l2_memory_V4L2_MEMORY_OVERLAY: v4l2_memory = 3;
pub const v4l2_memory_V4L2_MEMORY_DMABUF: v4l2_memory = 4;
pub type v4l2_memory = ::std::os::raw::c_uint;
pub const v4l2_colorspace_V4L2_COLORSPACE_DEFAULT: v4l2_colorspace = 0;
pub const v4l2_colorspace_V4L2_COLORSPACE_SMPTE170M: v4l2_colorspace = 1;
pub const v4l2_colorspace_V4L2_COLORSPACE_SMPTE240M: v4l2_colorspace = 2;
pub const v4l2_colorspace_V4L2_COLORSPACE_REC709: v4l2_colorspace = 3;
pub const v4l2_colorspace_V4L2_COLORSPACE_BT878: v4l2_colorspace = 4;
pub const v4l2_colorspace_V4L2_COLORSPACE_470_SYSTEM_M: v4l2_colorspace = 5;
pub const v4l2_colorspace_V4L2_COLORSPACE_470_SYSTEM_BG: v4l2_colorspace = 6;
pub const v4l2_colorspace_V4L2_COLORSPACE_JPEG: v4l2_colorspace = 7;
pub const v4l2_colorspace_V4L2_COLORSPACE_SRGB: v4l2_colorspace = 8;
pub const v4l2_colorspace_V4L2_COLORSPACE_OPRGB: v4l2_colorspace = 9;
pub const v4l2_colorspace_V4L2_COLORSPACE_BT2020: v4l2_colorspace = 10;
pub const v4l2_colorspace_V4L2_COLORSPACE_RAW: v4l2_colorspace = 11;
pub const v4l2_colorspace_V4L2_COLORSPACE_DCI_P3: v4l2_colorspace = 12;
pub type v4l2_colorspace = ::std::os::raw::c_uint;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_DEFAULT: v4l2_xfer_func = 0;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_709: v4l2_xfer_func = 1;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_SRGB: v4l2_xfer_func = 2;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_OPRGB: v4l2_xfer_func = 3;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_SMPTE240M: v4l2_xfer_func = 4;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_NONE: v4l2_xfer_func = 5;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_DCI_P3: v4l2_xfer_func = 6;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_SMPTE2084: v4l2_xfer_func = 7;
pub type v4l2_xfer_func = ::std::os::raw::c_uint;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_DEFAULT: v4l2_ycbcr_encoding = 0;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_601: v4l2_ycbcr_encoding = 1;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_709: v4l2_ycbcr_encoding = 2;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_XV601: v4l2_ycbcr_encoding = 3;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_XV709: v4l2_ycbcr_encoding = 4;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_SYCC: v4l2_ycbcr_encoding = 5;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_BT2020: v4l2_ycbcr_encoding = 6;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_BT2020_CONST_LUM: v4l2_ycbcr_encoding = 7;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_SMPTE240M: v4l2_ycbcr_encoding = 8;
pub type v4l2_ycbcr_encoding = ::std::os::raw::c_uint;
pub const v4l2_hsv_encoding_V4L2_HSV_ENC_180: v4l2_hsv_encoding = 128;
pub const v4l2_hsv_encoding_V4L2_HSV_ENC_256: v4l2_hsv_encoding = 129;
pub type v4l2_hsv_encoding = ::std::os::raw::c_uint;
pub const v4l2_quantization_V4L2_QUANTIZATION_DEFAULT: v4l2_quantization = 0;
pub const v4l2_quantization_V4L2_QUANTIZATION_FULL_RANGE: v4l2_quantization = 1;
pub const v4l2_quantization_V4L2_QUANTIZATION_LIM_RANGE: v4l2_quantization = 2;
pub type v4l2_quantization = ::std::os::raw::c_uint;
pub const v4l2_priority_V4L2_PRIORITY_UNSET: v4l2_priority = 0;
pub const v4l2_priority_V4L2_PRIORITY_BACKGROUND: v4l2_priority = 1;
pub const v4l2_priority_V4L2_PRIORITY_INTERACTIVE: v4l2_priority = 2;
pub const v4l2_priority_V4L2_PRIORITY_RECORD: v4l2_priority = 3;
pub const v4l2_priority_V4L2_PRIORITY_DEFAULT: v4l2_priority = 2;
pub type v4l2_priority = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_rect {
    pub left: __s32,
    pub top: __s32,
    pub width: __u32,
    pub height: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_rect() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_rect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_rect>(),
        16usize,
        concat!("Size of: ", stringify!(v4l2_rect))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_rect>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_rect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_rect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_rect),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_rect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_rect),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_fract {
    pub numerator: __u32,
    pub denominator: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_fract() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_fract> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_fract>(),
        8usize,
        concat!("Size of: ", stringify!(v4l2_fract))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_fract>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_fract))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numerator) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_fract),
            "::",
            stringify!(numerator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).denominator) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_fract),
            "::",
            stringify!(denominator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_area {
    pub width: __u32,
    pub height: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_area() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_area> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_area>(),
        8usize,
        concat!("Size of: ", stringify!(v4l2_area))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_area>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_area))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_area),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_area),
            "::",
            stringify!(height)
        )
    );
}
#[doc = " struct v4l2_capability - Describes V4L2 device caps returned by VIDIOC_QUERYCAP\n\n @driver:\t   name of the driver module (e.g. \"bttv\")\n @card:\t   name of the card (e.g. \"Hauppauge WinTV\")\n @bus_info:\t   name of the bus (e.g. \"PCI:\" + pci_name(pci_dev) )\n @version:\t   KERNEL_VERSION\n @capabilities: capabilities of the physical device as a whole\n @device_caps:  capabilities accessed via this particular device (node)\n @reserved:\t   reserved fields for future extensions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_capability {
    pub driver: [__u8; 16usize],
    pub card: [__u8; 32usize],
    pub bus_info: [__u8; 32usize],
    pub version: __u32,
    pub capabilities: __u32,
    pub device_caps: __u32,
    pub reserved: [__u32; 3usize],
}
#[test]
fn bindgen_test_layout_v4l2_capability() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_capability> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_capability>(),
        104usize,
        concat!("Size of: ", stringify!(v4l2_capability))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_capability>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_capability))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_capability),
            "::",
            stringify!(driver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).card) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_capability),
            "::",
            stringify!(card)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus_info) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_capability),
            "::",
            stringify!(bus_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_capability),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_capability),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_caps) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_capability),
            "::",
            stringify!(device_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_capability),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_pix_format {
    pub width: __u32,
    pub height: __u32,
    pub pixelformat: __u32,
    pub field: __u32,
    pub bytesperline: __u32,
    pub sizeimage: __u32,
    pub colorspace: __u32,
    pub priv_: __u32,
    pub flags: __u32,
    pub __bindgen_anon_1: v4l2_pix_format__bindgen_ty_1,
    pub quantization: __u32,
    pub xfer_func: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_pix_format__bindgen_ty_1 {
    pub ycbcr_enc: __u32,
    pub hsv_enc: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_pix_format__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_pix_format__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_pix_format__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(v4l2_pix_format__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_pix_format__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_pix_format__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ycbcr_enc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format__bindgen_ty_1),
            "::",
            stringify!(ycbcr_enc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hsv_enc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format__bindgen_ty_1),
            "::",
            stringify!(hsv_enc)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_pix_format() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_pix_format> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_pix_format>(),
        48usize,
        concat!("Size of: ", stringify!(v4l2_pix_format))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_pix_format>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_pix_format))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelformat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format),
            "::",
            stringify!(pixelformat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesperline) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format),
            "::",
            stringify!(bytesperline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeimage) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format),
            "::",
            stringify!(sizeimage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorspace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format),
            "::",
            stringify!(colorspace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priv_) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format),
            "::",
            stringify!(priv_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantization) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format),
            "::",
            stringify!(quantization)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xfer_func) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format),
            "::",
            stringify!(xfer_func)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_fmtdesc {
    pub index: __u32,
    pub type_: __u32,
    pub flags: __u32,
    pub description: [__u8; 32usize],
    pub pixelformat: __u32,
    pub mbus_code: __u32,
    pub reserved: [__u32; 3usize],
}
#[test]
fn bindgen_test_layout_v4l2_fmtdesc() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_fmtdesc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_fmtdesc>(),
        64usize,
        concat!("Size of: ", stringify!(v4l2_fmtdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_fmtdesc>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_fmtdesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_fmtdesc),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_fmtdesc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_fmtdesc),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_fmtdesc),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelformat) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_fmtdesc),
            "::",
            stringify!(pixelformat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbus_code) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_fmtdesc),
            "::",
            stringify!(mbus_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_fmtdesc),
            "::",
            stringify!(reserved)
        )
    );
}
pub const v4l2_frmsizetypes_V4L2_FRMSIZE_TYPE_DISCRETE: v4l2_frmsizetypes = 1;
pub const v4l2_frmsizetypes_V4L2_FRMSIZE_TYPE_CONTINUOUS: v4l2_frmsizetypes = 2;
pub const v4l2_frmsizetypes_V4L2_FRMSIZE_TYPE_STEPWISE: v4l2_frmsizetypes = 3;
pub type v4l2_frmsizetypes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_frmsize_discrete {
    pub width: __u32,
    pub height: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_frmsize_discrete() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_frmsize_discrete> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_frmsize_discrete>(),
        8usize,
        concat!("Size of: ", stringify!(v4l2_frmsize_discrete))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_frmsize_discrete>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_frmsize_discrete))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsize_discrete),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsize_discrete),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_frmsize_stepwise {
    pub min_width: __u32,
    pub max_width: __u32,
    pub step_width: __u32,
    pub min_height: __u32,
    pub max_height: __u32,
    pub step_height: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_frmsize_stepwise() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_frmsize_stepwise> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_frmsize_stepwise>(),
        24usize,
        concat!("Size of: ", stringify!(v4l2_frmsize_stepwise))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_frmsize_stepwise>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_frmsize_stepwise))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsize_stepwise),
            "::",
            stringify!(min_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsize_stepwise),
            "::",
            stringify!(max_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step_width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsize_stepwise),
            "::",
            stringify!(step_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsize_stepwise),
            "::",
            stringify!(min_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsize_stepwise),
            "::",
            stringify!(max_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step_height) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsize_stepwise),
            "::",
            stringify!(step_height)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_frmsizeenum {
    pub index: __u32,
    pub pixel_format: __u32,
    pub type_: __u32,
    pub __bindgen_anon_1: v4l2_frmsizeenum__bindgen_ty_1,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_frmsizeenum__bindgen_ty_1 {
    pub discrete: v4l2_frmsize_discrete,
    pub stepwise: v4l2_frmsize_stepwise,
}
#[test]
fn bindgen_test_layout_v4l2_frmsizeenum__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_frmsizeenum__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_frmsizeenum__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(v4l2_frmsizeenum__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_frmsizeenum__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_frmsizeenum__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discrete) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsizeenum__bindgen_ty_1),
            "::",
            stringify!(discrete)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stepwise) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsizeenum__bindgen_ty_1),
            "::",
            stringify!(stepwise)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_frmsizeenum() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_frmsizeenum> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_frmsizeenum>(),
        44usize,
        concat!("Size of: ", stringify!(v4l2_frmsizeenum))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_frmsizeenum>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_frmsizeenum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsizeenum),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsizeenum),
            "::",
            stringify!(pixel_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsizeenum),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmsizeenum),
            "::",
            stringify!(reserved)
        )
    );
}
pub const v4l2_frmivaltypes_V4L2_FRMIVAL_TYPE_DISCRETE: v4l2_frmivaltypes = 1;
pub const v4l2_frmivaltypes_V4L2_FRMIVAL_TYPE_CONTINUOUS: v4l2_frmivaltypes = 2;
pub const v4l2_frmivaltypes_V4L2_FRMIVAL_TYPE_STEPWISE: v4l2_frmivaltypes = 3;
pub type v4l2_frmivaltypes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_frmival_stepwise {
    pub min: v4l2_fract,
    pub max: v4l2_fract,
    pub step: v4l2_fract,
}
#[test]
fn bindgen_test_layout_v4l2_frmival_stepwise() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_frmival_stepwise> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_frmival_stepwise>(),
        24usize,
        concat!("Size of: ", stringify!(v4l2_frmival_stepwise))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_frmival_stepwise>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_frmival_stepwise))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmival_stepwise),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmival_stepwise),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmival_stepwise),
            "::",
            stringify!(step)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_frmivalenum {
    pub index: __u32,
    pub pixel_format: __u32,
    pub width: __u32,
    pub height: __u32,
    pub type_: __u32,
    pub __bindgen_anon_1: v4l2_frmivalenum__bindgen_ty_1,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_frmivalenum__bindgen_ty_1 {
    pub discrete: v4l2_fract,
    pub stepwise: v4l2_frmival_stepwise,
}
#[test]
fn bindgen_test_layout_v4l2_frmivalenum__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_frmivalenum__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_frmivalenum__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(v4l2_frmivalenum__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_frmivalenum__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_frmivalenum__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discrete) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmivalenum__bindgen_ty_1),
            "::",
            stringify!(discrete)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stepwise) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmivalenum__bindgen_ty_1),
            "::",
            stringify!(stepwise)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_frmivalenum() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_frmivalenum> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_frmivalenum>(),
        52usize,
        concat!("Size of: ", stringify!(v4l2_frmivalenum))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_frmivalenum>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_frmivalenum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmivalenum),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmivalenum),
            "::",
            stringify!(pixel_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmivalenum),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmivalenum),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmivalenum),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frmivalenum),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_timecode {
    pub type_: __u32,
    pub flags: __u32,
    pub frames: __u8,
    pub seconds: __u8,
    pub minutes: __u8,
    pub hours: __u8,
    pub userbits: [__u8; 4usize],
}
#[test]
fn bindgen_test_layout_v4l2_timecode() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_timecode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_timecode>(),
        16usize,
        concat!("Size of: ", stringify!(v4l2_timecode))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_timecode>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_timecode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_timecode),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_timecode),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frames) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_timecode),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_timecode),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minutes) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_timecode),
            "::",
            stringify!(minutes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hours) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_timecode),
            "::",
            stringify!(hours)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userbits) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_timecode),
            "::",
            stringify!(userbits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_jpegcompression {
    pub quality: ::std::os::raw::c_int,
    pub APPn: ::std::os::raw::c_int,
    pub APP_len: ::std::os::raw::c_int,
    pub APP_data: [::std::os::raw::c_char; 60usize],
    pub COM_len: ::std::os::raw::c_int,
    pub COM_data: [::std::os::raw::c_char; 60usize],
    pub jpeg_markers: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_jpegcompression() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_jpegcompression> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_jpegcompression>(),
        140usize,
        concat!("Size of: ", stringify!(v4l2_jpegcompression))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_jpegcompression>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_jpegcompression))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quality) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_jpegcompression),
            "::",
            stringify!(quality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).APPn) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_jpegcompression),
            "::",
            stringify!(APPn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).APP_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_jpegcompression),
            "::",
            stringify!(APP_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).APP_data) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_jpegcompression),
            "::",
            stringify!(APP_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).COM_len) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_jpegcompression),
            "::",
            stringify!(COM_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).COM_data) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_jpegcompression),
            "::",
            stringify!(COM_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jpeg_markers) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_jpegcompression),
            "::",
            stringify!(jpeg_markers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_requestbuffers {
    pub count: __u32,
    pub type_: __u32,
    pub memory: __u32,
    pub capabilities: __u32,
    pub reserved: [__u32; 1usize],
}
#[test]
fn bindgen_test_layout_v4l2_requestbuffers() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_requestbuffers> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_requestbuffers>(),
        20usize,
        concat!("Size of: ", stringify!(v4l2_requestbuffers))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_requestbuffers>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_requestbuffers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_requestbuffers),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_requestbuffers),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_requestbuffers),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_requestbuffers),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_requestbuffers),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = " struct v4l2_plane - plane info for multi-planar buffers\n @bytesused:\t\tnumber of bytes occupied by data in the plane (payload)\n @length:\t\tsize of this plane (NOT the payload) in bytes\n @mem_offset:\t\twhen memory in the associated struct v4l2_buffer is\n\t\t\tV4L2_MEMORY_MMAP, equals the offset from the start of\n\t\t\tthe device memory for this plane (or is a \"cookie\" that\n\t\t\tshould be passed to mmap() called on the video node)\n @userptr:\t\twhen memory is V4L2_MEMORY_USERPTR, a userspace pointer\n\t\t\tpointing to this plane\n @fd:\t\t\twhen memory is V4L2_MEMORY_DMABUF, a userspace file\n\t\t\tdescriptor associated with this plane\n @m:\t\t\tunion of @mem_offset, @userptr and @fd\n @data_offset:\toffset in the plane to the start of data; usually 0,\n\t\t\tunless there is a header in front of the data\n @reserved:\t\tdrivers and applications must zero this array\n\n Multi-planar buffers consist of one or more planes, e.g. an YCbCr buffer\n with two planes can have one plane for Y, and another for interleaved CbCr\n components. Each plane can reside in a separate memory buffer, or even in\n a completely separate memory node (e.g. in embedded devices)."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_plane {
    pub bytesused: __u32,
    pub length: __u32,
    pub m: v4l2_plane__bindgen_ty_1,
    pub data_offset: __u32,
    pub reserved: [__u32; 11usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_plane__bindgen_ty_1 {
    pub mem_offset: __u32,
    pub userptr: ::std::os::raw::c_ulong,
    pub fd: __s32,
}
#[test]
fn bindgen_test_layout_v4l2_plane__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_plane__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_plane__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(v4l2_plane__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_plane__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_plane__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_plane__bindgen_ty_1),
            "::",
            stringify!(mem_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_plane__bindgen_ty_1),
            "::",
            stringify!(userptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_plane__bindgen_ty_1),
            "::",
            stringify!(fd)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_plane() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_plane> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_plane>(),
        64usize,
        concat!("Size of: ", stringify!(v4l2_plane))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_plane>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_plane))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_plane),
            "::",
            stringify!(bytesused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_plane),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_plane),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_plane),
            "::",
            stringify!(data_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_plane),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = " struct v4l2_buffer - video buffer info\n @index:\tid number of the buffer\n @type:\tenum v4l2_buf_type; buffer type (type == *_MPLANE for\n\t\tmultiplanar buffers);\n @bytesused:\tnumber of bytes occupied by data in the buffer (payload);\n\t\tunused (set to 0) for multiplanar buffers\n @flags:\tbuffer informational flags\n @field:\tenum v4l2_field; field order of the image in the buffer\n @timestamp:\tframe timestamp\n @timecode:\tframe timecode\n @sequence:\tsequence count of this frame\n @memory:\tenum v4l2_memory; the method, in which the actual video data is\n\t\tpassed\n @offset:\tfor non-multiplanar buffers with memory == V4L2_MEMORY_MMAP;\n\t\toffset from the start of the device memory for this plane,\n\t\t(or a \"cookie\" that should be passed to mmap() as offset)\n @userptr:\tfor non-multiplanar buffers with memory == V4L2_MEMORY_USERPTR;\n\t\ta userspace pointer pointing to this buffer\n @fd:\t\tfor non-multiplanar buffers with memory == V4L2_MEMORY_DMABUF;\n\t\ta userspace file descriptor associated with this buffer\n @planes:\tfor multiplanar buffers; userspace pointer to the array of plane\n\t\tinfo structs for this buffer\n @m:\t\tunion of @offset, @userptr, @planes and @fd\n @length:\tsize in bytes of the buffer (NOT its payload) for single-plane\n\t\tbuffers (when type != *_MPLANE); number of elements in the\n\t\tplanes array for multi-plane buffers\n @reserved2:\tdrivers and applications must zero this field\n @request_fd: fd of the request that this buffer should use\n @reserved:\tfor backwards compatibility with applications that do not know\n\t\tabout @request_fd\n\n Contains data exchanged by application and driver using one of the Streaming\n I/O methods."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_buffer {
    pub index: __u32,
    pub type_: __u32,
    pub bytesused: __u32,
    pub flags: __u32,
    pub field: __u32,
    pub timestamp: timeval,
    pub timecode: v4l2_timecode,
    pub sequence: __u32,
    pub memory: __u32,
    pub m: v4l2_buffer__bindgen_ty_1,
    pub length: __u32,
    pub reserved2: __u32,
    pub __bindgen_anon_1: v4l2_buffer__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_buffer__bindgen_ty_1 {
    pub offset: __u32,
    pub userptr: ::std::os::raw::c_ulong,
    pub planes: *mut v4l2_plane,
    pub fd: __s32,
}
#[test]
fn bindgen_test_layout_v4l2_buffer__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_buffer__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_buffer__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(v4l2_buffer__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_buffer__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_buffer__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer__bindgen_ty_1),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer__bindgen_ty_1),
            "::",
            stringify!(userptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer__bindgen_ty_1),
            "::",
            stringify!(planes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer__bindgen_ty_1),
            "::",
            stringify!(fd)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_buffer__bindgen_ty_2 {
    pub request_fd: __s32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_buffer__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_buffer__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_buffer__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(v4l2_buffer__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_buffer__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_buffer__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer__bindgen_ty_2),
            "::",
            stringify!(request_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer__bindgen_ty_2),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_buffer>(),
        88usize,
        concat!("Size of: ", stringify!(v4l2_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesused) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(bytesused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timecode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(timecode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_buffer),
            "::",
            stringify!(reserved2)
        )
    );
}
#[doc = " struct v4l2_exportbuffer - export of video buffer as DMABUF file descriptor\n\n @index:\tid number of the buffer\n @type:\tenum v4l2_buf_type; buffer type (type == *_MPLANE for\n\t\tmultiplanar buffers);\n @plane:\tindex of the plane to be exported, 0 for single plane queues\n @flags:\tflags for newly created file, currently only O_CLOEXEC is\n\t\tsupported, refer to manual of open syscall for more details\n @fd:\t\tfile descriptor associated with DMABUF (set by driver)\n @reserved:\tdrivers and applications must zero this array\n\n Contains data used for exporting a video buffer as DMABUF file descriptor.\n The buffer is identified by a 'cookie' returned by VIDIOC_QUERYBUF\n (identical to the cookie used to mmap() the buffer to userspace). All\n reserved fields must be set to zero. The field reserved0 is expected to\n become a structure 'type' allowing an alternative layout of the structure\n content. Therefore this field should not be used for any other extensions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_exportbuffer {
    pub type_: __u32,
    pub index: __u32,
    pub plane: __u32,
    pub flags: __u32,
    pub fd: __s32,
    pub reserved: [__u32; 11usize],
}
#[test]
fn bindgen_test_layout_v4l2_exportbuffer() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_exportbuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_exportbuffer>(),
        64usize,
        concat!("Size of: ", stringify!(v4l2_exportbuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_exportbuffer>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_exportbuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_exportbuffer),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_exportbuffer),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plane) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_exportbuffer),
            "::",
            stringify!(plane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_exportbuffer),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_exportbuffer),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_exportbuffer),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_framebuffer {
    pub capability: __u32,
    pub flags: __u32,
    pub base: *mut ::std::os::raw::c_void,
    pub fmt: v4l2_framebuffer__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_framebuffer__bindgen_ty_1 {
    pub width: __u32,
    pub height: __u32,
    pub pixelformat: __u32,
    pub field: __u32,
    pub bytesperline: __u32,
    pub sizeimage: __u32,
    pub colorspace: __u32,
    pub priv_: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_framebuffer__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_framebuffer__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_framebuffer__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(v4l2_framebuffer__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_framebuffer__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_framebuffer__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer__bindgen_ty_1),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer__bindgen_ty_1),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelformat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer__bindgen_ty_1),
            "::",
            stringify!(pixelformat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer__bindgen_ty_1),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesperline) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer__bindgen_ty_1),
            "::",
            stringify!(bytesperline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeimage) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer__bindgen_ty_1),
            "::",
            stringify!(sizeimage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorspace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer__bindgen_ty_1),
            "::",
            stringify!(colorspace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priv_) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer__bindgen_ty_1),
            "::",
            stringify!(priv_)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_framebuffer() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_framebuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_framebuffer>(),
        48usize,
        concat!("Size of: ", stringify!(v4l2_framebuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_framebuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_framebuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capability) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_framebuffer),
            "::",
            stringify!(fmt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_clip {
    pub c: v4l2_rect,
    pub next: *mut v4l2_clip,
}
#[test]
fn bindgen_test_layout_v4l2_clip() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_clip> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_clip>(),
        24usize,
        concat!("Size of: ", stringify!(v4l2_clip))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_clip>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_clip))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_clip),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_clip),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_window {
    pub w: v4l2_rect,
    pub field: __u32,
    pub chromakey: __u32,
    pub clips: *mut v4l2_clip,
    pub clipcount: __u32,
    pub bitmap: *mut ::std::os::raw::c_void,
    pub global_alpha: __u8,
}
#[test]
fn bindgen_test_layout_v4l2_window() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_window> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_window>(),
        56usize,
        concat!("Size of: ", stringify!(v4l2_window))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_window>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_window))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_window),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_window),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chromakey) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_window),
            "::",
            stringify!(chromakey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clips) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_window),
            "::",
            stringify!(clips)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipcount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_window),
            "::",
            stringify!(clipcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitmap) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_window),
            "::",
            stringify!(bitmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_alpha) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_window),
            "::",
            stringify!(global_alpha)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_captureparm {
    pub capability: __u32,
    pub capturemode: __u32,
    pub timeperframe: v4l2_fract,
    pub extendedmode: __u32,
    pub readbuffers: __u32,
    pub reserved: [__u32; 4usize],
}
#[test]
fn bindgen_test_layout_v4l2_captureparm() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_captureparm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_captureparm>(),
        40usize,
        concat!("Size of: ", stringify!(v4l2_captureparm))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_captureparm>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_captureparm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capability) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_captureparm),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capturemode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_captureparm),
            "::",
            stringify!(capturemode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeperframe) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_captureparm),
            "::",
            stringify!(timeperframe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extendedmode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_captureparm),
            "::",
            stringify!(extendedmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readbuffers) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_captureparm),
            "::",
            stringify!(readbuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_captureparm),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_outputparm {
    pub capability: __u32,
    pub outputmode: __u32,
    pub timeperframe: v4l2_fract,
    pub extendedmode: __u32,
    pub writebuffers: __u32,
    pub reserved: [__u32; 4usize],
}
#[test]
fn bindgen_test_layout_v4l2_outputparm() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_outputparm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_outputparm>(),
        40usize,
        concat!("Size of: ", stringify!(v4l2_outputparm))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_outputparm>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_outputparm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capability) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_outputparm),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputmode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_outputparm),
            "::",
            stringify!(outputmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeperframe) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_outputparm),
            "::",
            stringify!(timeperframe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extendedmode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_outputparm),
            "::",
            stringify!(extendedmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writebuffers) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_outputparm),
            "::",
            stringify!(writebuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_outputparm),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_cropcap {
    pub type_: __u32,
    pub bounds: v4l2_rect,
    pub defrect: v4l2_rect,
    pub pixelaspect: v4l2_fract,
}
#[test]
fn bindgen_test_layout_v4l2_cropcap() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_cropcap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_cropcap>(),
        44usize,
        concat!("Size of: ", stringify!(v4l2_cropcap))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_cropcap>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_cropcap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_cropcap),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_cropcap),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defrect) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_cropcap),
            "::",
            stringify!(defrect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelaspect) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_cropcap),
            "::",
            stringify!(pixelaspect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_crop {
    pub type_: __u32,
    pub c: v4l2_rect,
}
#[test]
fn bindgen_test_layout_v4l2_crop() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_crop> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_crop>(),
        20usize,
        concat!("Size of: ", stringify!(v4l2_crop))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_crop>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_crop))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_crop),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_crop),
            "::",
            stringify!(c)
        )
    );
}
#[doc = " struct v4l2_selection - selection info\n @type:\tbuffer type (do not use *_MPLANE types)\n @target:\tSelection target, used to choose one of possible rectangles;\n\t\tdefined in v4l2-common.h; V4L2_SEL_TGT_* .\n @flags:\tconstraints flags, defined in v4l2-common.h; V4L2_SEL_FLAG_*.\n @r:\t\tcoordinates of selection window\n @reserved:\tfor future use, rounds structure size to 64 bytes, set to zero\n\n Hardware may use multiple helper windows to process a video stream.\n The structure is used to exchange this selection areas between\n an application and a driver."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_selection {
    pub type_: __u32,
    pub target: __u32,
    pub flags: __u32,
    pub r: v4l2_rect,
    pub reserved: [__u32; 9usize],
}
#[test]
fn bindgen_test_layout_v4l2_selection() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_selection> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_selection>(),
        64usize,
        concat!("Size of: ", stringify!(v4l2_selection))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_selection>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_selection))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_selection),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_selection),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_selection),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_selection),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_selection),
            "::",
            stringify!(reserved)
        )
    );
}
pub type v4l2_std_id = __u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_standard {
    pub index: __u32,
    pub id: v4l2_std_id,
    pub name: [__u8; 24usize],
    pub frameperiod: v4l2_fract,
    pub framelines: __u32,
    pub reserved: [__u32; 4usize],
}
#[test]
fn bindgen_test_layout_v4l2_standard() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_standard> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_standard>(),
        72usize,
        concat!("Size of: ", stringify!(v4l2_standard))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_standard>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_standard))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_standard),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_standard),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_standard),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameperiod) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_standard),
            "::",
            stringify!(frameperiod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framelines) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_standard),
            "::",
            stringify!(framelines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_standard),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = " struct v4l2_bt_timings - BT.656/BT.1120 timing data\n @width:\ttotal width of the active video in pixels\n @height:\ttotal height of the active video in lines\n @interlaced:\tInterlaced or progressive\n @polarities:\tPositive or negative polarities\n @pixelclock:\tPixel clock in HZ. Ex. 74.25MHz->74250000\n @hfrontporch:Horizontal front porch in pixels\n @hsync:\tHorizontal Sync length in pixels\n @hbackporch:\tHorizontal back porch in pixels\n @vfrontporch:Vertical front porch in lines\n @vsync:\tVertical Sync length in lines\n @vbackporch:\tVertical back porch in lines\n @il_vfrontporch:Vertical front porch for the even field\n\t\t(aka field 2) of interlaced field formats\n @il_vsync:\tVertical Sync length for the even field\n\t\t(aka field 2) of interlaced field formats\n @il_vbackporch:Vertical back porch for the even field\n\t\t(aka field 2) of interlaced field formats\n @standards:\tStandards the timing belongs to\n @flags:\tFlags\n @picture_aspect: The picture aspect ratio (hor/vert).\n @cea861_vic:\tVIC code as per the CEA-861 standard.\n @hdmi_vic:\tVIC code as per the HDMI standard.\n @reserved:\tReserved fields, must be zeroed.\n\n A note regarding vertical interlaced timings: height refers to the total\n height of the active video frame (= two fields). The blanking timings refer\n to the blanking of each field. So the height of the total frame is\n calculated as follows:\n\n tot_height = height + vfrontporch + vsync + vbackporch +\n                       il_vfrontporch + il_vsync + il_vbackporch\n\n The active height of each field is height / 2."]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_bt_timings {
    pub width: __u32,
    pub height: __u32,
    pub interlaced: __u32,
    pub polarities: __u32,
    pub pixelclock: __u64,
    pub hfrontporch: __u32,
    pub hsync: __u32,
    pub hbackporch: __u32,
    pub vfrontporch: __u32,
    pub vsync: __u32,
    pub vbackporch: __u32,
    pub il_vfrontporch: __u32,
    pub il_vsync: __u32,
    pub il_vbackporch: __u32,
    pub standards: __u32,
    pub flags: __u32,
    pub picture_aspect: v4l2_fract,
    pub cea861_vic: __u8,
    pub hdmi_vic: __u8,
    pub reserved: [__u8; 46usize],
}
#[test]
fn bindgen_test_layout_v4l2_bt_timings() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_bt_timings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_bt_timings>(),
        124usize,
        concat!("Size of: ", stringify!(v4l2_bt_timings))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_bt_timings>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_bt_timings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interlaced) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(interlaced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).polarities) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(polarities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelclock) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(pixelclock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfrontporch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(hfrontporch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hsync) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(hsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hbackporch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(hbackporch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfrontporch) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(vfrontporch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vsync) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(vsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vbackporch) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(vbackporch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).il_vfrontporch) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(il_vfrontporch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).il_vsync) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(il_vsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).il_vbackporch) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(il_vbackporch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).standards) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(standards)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).picture_aspect) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(picture_aspect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cea861_vic) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(cea861_vic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdmi_vic) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(hdmi_vic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = " struct v4l2_dv_timings - DV timings\n @type:\tthe type of the timings\n @bt:\tBT656/1120 timings"]
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_dv_timings {
    pub type_: __u32,
    pub __bindgen_anon_1: v4l2_dv_timings__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_dv_timings__bindgen_ty_1 {
    pub bt: v4l2_bt_timings,
    pub reserved: [__u32; 32usize],
}
#[test]
fn bindgen_test_layout_v4l2_dv_timings__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_dv_timings__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_dv_timings__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(v4l2_dv_timings__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_dv_timings__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_dv_timings__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dv_timings__bindgen_ty_1),
            "::",
            stringify!(bt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dv_timings__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_dv_timings() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_dv_timings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_dv_timings>(),
        132usize,
        concat!("Size of: ", stringify!(v4l2_dv_timings))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_dv_timings>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_dv_timings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dv_timings),
            "::",
            stringify!(type_)
        )
    );
}
#[doc = " struct v4l2_enum_dv_timings - DV timings enumeration\n @index:\tenumeration index\n @pad:\tthe pad number for which to enumerate timings (used with\n\t\tv4l-subdev nodes only)\n @reserved:\tmust be zeroed\n @timings:\tthe timings for the given index"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_enum_dv_timings {
    pub index: __u32,
    pub pad: __u32,
    pub reserved: [__u32; 2usize],
    pub timings: v4l2_dv_timings,
}
#[test]
fn bindgen_test_layout_v4l2_enum_dv_timings() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_enum_dv_timings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_enum_dv_timings>(),
        148usize,
        concat!("Size of: ", stringify!(v4l2_enum_dv_timings))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_enum_dv_timings>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_enum_dv_timings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enum_dv_timings),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enum_dv_timings),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enum_dv_timings),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timings) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enum_dv_timings),
            "::",
            stringify!(timings)
        )
    );
}
#[doc = " struct v4l2_bt_timings_cap - BT.656/BT.1120 timing capabilities\n @min_width:\t\twidth in pixels\n @max_width:\t\twidth in pixels\n @min_height:\t\theight in lines\n @max_height:\t\theight in lines\n @min_pixelclock:\tPixel clock in HZ. Ex. 74.25MHz->74250000\n @max_pixelclock:\tPixel clock in HZ. Ex. 74.25MHz->74250000\n @standards:\t\tSupported standards\n @capabilities:\tSupported capabilities\n @reserved:\t\tMust be zeroed"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_bt_timings_cap {
    pub min_width: __u32,
    pub max_width: __u32,
    pub min_height: __u32,
    pub max_height: __u32,
    pub min_pixelclock: __u64,
    pub max_pixelclock: __u64,
    pub standards: __u32,
    pub capabilities: __u32,
    pub reserved: [__u32; 16usize],
}
#[test]
fn bindgen_test_layout_v4l2_bt_timings_cap() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_bt_timings_cap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_bt_timings_cap>(),
        104usize,
        concat!("Size of: ", stringify!(v4l2_bt_timings_cap))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_bt_timings_cap>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_bt_timings_cap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings_cap),
            "::",
            stringify!(min_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings_cap),
            "::",
            stringify!(max_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_height) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings_cap),
            "::",
            stringify!(min_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings_cap),
            "::",
            stringify!(max_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_pixelclock) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings_cap),
            "::",
            stringify!(min_pixelclock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_pixelclock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings_cap),
            "::",
            stringify!(max_pixelclock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).standards) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings_cap),
            "::",
            stringify!(standards)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings_cap),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_bt_timings_cap),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = " struct v4l2_dv_timings_cap - DV timings capabilities\n @type:\tthe type of the timings (same as in struct v4l2_dv_timings)\n @pad:\tthe pad number for which to query capabilities (used with\n\t\tv4l-subdev nodes only)\n @bt:\t\tthe BT656/1120 timings capabilities"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_dv_timings_cap {
    pub type_: __u32,
    pub pad: __u32,
    pub reserved: [__u32; 2usize],
    pub __bindgen_anon_1: v4l2_dv_timings_cap__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_dv_timings_cap__bindgen_ty_1 {
    pub bt: v4l2_bt_timings_cap,
    pub raw_data: [__u32; 32usize],
}
#[test]
fn bindgen_test_layout_v4l2_dv_timings_cap__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_dv_timings_cap__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_dv_timings_cap__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(v4l2_dv_timings_cap__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_dv_timings_cap__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(v4l2_dv_timings_cap__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dv_timings_cap__bindgen_ty_1),
            "::",
            stringify!(bt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dv_timings_cap__bindgen_ty_1),
            "::",
            stringify!(raw_data)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_dv_timings_cap() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_dv_timings_cap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_dv_timings_cap>(),
        144usize,
        concat!("Size of: ", stringify!(v4l2_dv_timings_cap))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_dv_timings_cap>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_dv_timings_cap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dv_timings_cap),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dv_timings_cap),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dv_timings_cap),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_input {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub type_: __u32,
    pub audioset: __u32,
    pub tuner: __u32,
    pub std: v4l2_std_id,
    pub status: __u32,
    pub capabilities: __u32,
    pub reserved: [__u32; 3usize],
}
#[test]
fn bindgen_test_layout_v4l2_input() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_input> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_input>(),
        80usize,
        concat!("Size of: ", stringify!(v4l2_input))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_input>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_input))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_input),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_input),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_input),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audioset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_input),
            "::",
            stringify!(audioset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tuner) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_input),
            "::",
            stringify!(tuner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).std) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_input),
            "::",
            stringify!(std)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_input),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_input),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_input),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_output {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub type_: __u32,
    pub audioset: __u32,
    pub modulator: __u32,
    pub std: v4l2_std_id,
    pub capabilities: __u32,
    pub reserved: [__u32; 3usize],
}
#[test]
fn bindgen_test_layout_v4l2_output() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_output> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_output>(),
        72usize,
        concat!("Size of: ", stringify!(v4l2_output))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_output>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_output))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_output),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_output),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_output),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audioset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_output),
            "::",
            stringify!(audioset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modulator) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_output),
            "::",
            stringify!(modulator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).std) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_output),
            "::",
            stringify!(std)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_output),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_output),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_control {
    pub id: __u32,
    pub value: __s32,
}
#[test]
fn bindgen_test_layout_v4l2_control() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_control> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_control>(),
        8usize,
        concat!("Size of: ", stringify!(v4l2_control))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_control>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_control))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_control),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_control),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_ext_control {
    pub id: __u32,
    pub size: __u32,
    pub reserved2: [__u32; 1usize],
    pub __bindgen_anon_1: v4l2_ext_control__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_ext_control__bindgen_ty_1 {
    pub value: __s32,
    pub value64: __s64,
    pub string: *mut ::std::os::raw::c_char,
    pub p_u8: *mut __u8,
    pub p_u16: *mut __u16,
    pub p_u32: *mut __u32,
    pub p_area: *mut v4l2_area,
    pub p_h264_sps: *mut v4l2_ctrl_h264_sps,
    pub p_h264_pps: *mut v4l2_ctrl_h264_pps,
    pub p_h264_scaling_matrix: *mut v4l2_ctrl_h264_scaling_matrix,
    pub p_h264_pred_weights: *mut v4l2_ctrl_h264_pred_weights,
    pub p_h264_slice_params: *mut v4l2_ctrl_h264_slice_params,
    pub p_h264_decode_params: *mut v4l2_ctrl_h264_decode_params,
    pub p_fwht_params: *mut v4l2_ctrl_fwht_params,
    pub p_vp8_frame: *mut v4l2_ctrl_vp8_frame,
    pub p_mpeg2_sequence: *mut v4l2_ctrl_mpeg2_sequence,
    pub p_mpeg2_picture: *mut v4l2_ctrl_mpeg2_picture,
    pub p_mpeg2_quantisation: *mut v4l2_ctrl_mpeg2_quantisation,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_v4l2_ext_control__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ext_control__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ext_control__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(v4l2_ext_control__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ext_control__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_ext_control__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_u8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_u8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_u16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_u16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_u32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_u32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_area) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_h264_sps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_h264_sps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_h264_pps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_h264_pps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_h264_scaling_matrix) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_h264_scaling_matrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_h264_pred_weights) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_h264_pred_weights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_h264_slice_params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_h264_slice_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_h264_decode_params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_h264_decode_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_fwht_params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_fwht_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_vp8_frame) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_vp8_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_mpeg2_sequence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_mpeg2_sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_mpeg2_picture) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_mpeg2_picture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_mpeg2_quantisation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(p_mpeg2_quantisation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_ext_control() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ext_control> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ext_control>(),
        20usize,
        concat!("Size of: ", stringify!(v4l2_ext_control))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ext_control>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_ext_control))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_control),
            "::",
            stringify!(reserved2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_ext_controls {
    pub __bindgen_anon_1: v4l2_ext_controls__bindgen_ty_1,
    pub count: __u32,
    pub error_idx: __u32,
    pub request_fd: __s32,
    pub reserved: [__u32; 1usize],
    pub controls: *mut v4l2_ext_control,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_ext_controls__bindgen_ty_1 {
    pub ctrl_class: __u32,
    pub which: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_ext_controls__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ext_controls__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ext_controls__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(v4l2_ext_controls__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ext_controls__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_ext_controls__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_class) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_controls__bindgen_ty_1),
            "::",
            stringify!(ctrl_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_controls__bindgen_ty_1),
            "::",
            stringify!(which)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_ext_controls() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_ext_controls> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_ext_controls>(),
        32usize,
        concat!("Size of: ", stringify!(v4l2_ext_controls))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_ext_controls>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_ext_controls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_controls),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_idx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_controls),
            "::",
            stringify!(error_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_fd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_controls),
            "::",
            stringify!(request_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_controls),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).controls) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_ext_controls),
            "::",
            stringify!(controls)
        )
    );
}
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_INTEGER: v4l2_ctrl_type = 1;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_BOOLEAN: v4l2_ctrl_type = 2;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_MENU: v4l2_ctrl_type = 3;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_BUTTON: v4l2_ctrl_type = 4;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_INTEGER64: v4l2_ctrl_type = 5;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_CTRL_CLASS: v4l2_ctrl_type = 6;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_STRING: v4l2_ctrl_type = 7;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_BITMASK: v4l2_ctrl_type = 8;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_INTEGER_MENU: v4l2_ctrl_type = 9;
pub const v4l2_ctrl_type_V4L2_CTRL_COMPOUND_TYPES: v4l2_ctrl_type = 256;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_U8: v4l2_ctrl_type = 256;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_U16: v4l2_ctrl_type = 257;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_U32: v4l2_ctrl_type = 258;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_AREA: v4l2_ctrl_type = 262;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_HDR10_CLL_INFO: v4l2_ctrl_type = 272;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_HDR10_MASTERING_DISPLAY: v4l2_ctrl_type = 273;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_SPS: v4l2_ctrl_type = 512;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_PPS: v4l2_ctrl_type = 513;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_SCALING_MATRIX: v4l2_ctrl_type = 514;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_SLICE_PARAMS: v4l2_ctrl_type = 515;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_DECODE_PARAMS: v4l2_ctrl_type = 516;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_PRED_WEIGHTS: v4l2_ctrl_type = 517;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_FWHT_PARAMS: v4l2_ctrl_type = 544;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_VP8_FRAME: v4l2_ctrl_type = 576;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_MPEG2_QUANTISATION: v4l2_ctrl_type = 592;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_MPEG2_SEQUENCE: v4l2_ctrl_type = 593;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_MPEG2_PICTURE: v4l2_ctrl_type = 594;
pub type v4l2_ctrl_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_queryctrl {
    pub id: __u32,
    pub type_: __u32,
    pub name: [__u8; 32usize],
    pub minimum: __s32,
    pub maximum: __s32,
    pub step: __s32,
    pub default_value: __s32,
    pub flags: __u32,
    pub reserved: [__u32; 2usize],
}
#[test]
fn bindgen_test_layout_v4l2_queryctrl() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_queryctrl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_queryctrl>(),
        68usize,
        concat!("Size of: ", stringify!(v4l2_queryctrl))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_queryctrl>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_queryctrl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_queryctrl),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_queryctrl),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_queryctrl),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimum) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_queryctrl),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximum) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_queryctrl),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_queryctrl),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_queryctrl),
            "::",
            stringify!(default_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_queryctrl),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_queryctrl),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_query_ext_ctrl {
    pub id: __u32,
    pub type_: __u32,
    pub name: [::std::os::raw::c_char; 32usize],
    pub minimum: __s64,
    pub maximum: __s64,
    pub step: __u64,
    pub default_value: __s64,
    pub flags: __u32,
    pub elem_size: __u32,
    pub elems: __u32,
    pub nr_of_dims: __u32,
    pub dims: [__u32; 4usize],
    pub reserved: [__u32; 32usize],
}
#[test]
fn bindgen_test_layout_v4l2_query_ext_ctrl() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_query_ext_ctrl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_query_ext_ctrl>(),
        232usize,
        concat!("Size of: ", stringify!(v4l2_query_ext_ctrl))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_query_ext_ctrl>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_query_ext_ctrl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimum) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximum) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(default_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_size) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(elem_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elems) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(elems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_of_dims) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(nr_of_dims)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dims) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(dims)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_query_ext_ctrl),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_querymenu {
    pub id: __u32,
    pub index: __u32,
    pub __bindgen_anon_1: v4l2_querymenu__bindgen_ty_1,
    pub reserved: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_querymenu__bindgen_ty_1 {
    pub name: [__u8; 32usize],
    pub value: __s64,
}
#[test]
fn bindgen_test_layout_v4l2_querymenu__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_querymenu__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_querymenu__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(v4l2_querymenu__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_querymenu__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_querymenu__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_querymenu__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_querymenu__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_querymenu() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_querymenu> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_querymenu>(),
        44usize,
        concat!("Size of: ", stringify!(v4l2_querymenu))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_querymenu>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_querymenu))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_querymenu),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_querymenu),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_querymenu),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_tuner {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub type_: __u32,
    pub capability: __u32,
    pub rangelow: __u32,
    pub rangehigh: __u32,
    pub rxsubchans: __u32,
    pub audmode: __u32,
    pub signal: __s32,
    pub afc: __s32,
    pub reserved: [__u32; 4usize],
}
#[test]
fn bindgen_test_layout_v4l2_tuner() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_tuner> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_tuner>(),
        84usize,
        concat!("Size of: ", stringify!(v4l2_tuner))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_tuner>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_tuner))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_tuner),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_tuner),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_tuner),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capability) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_tuner),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangelow) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_tuner),
            "::",
            stringify!(rangelow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangehigh) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_tuner),
            "::",
            stringify!(rangehigh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rxsubchans) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_tuner),
            "::",
            stringify!(rxsubchans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audmode) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_tuner),
            "::",
            stringify!(audmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_tuner),
            "::",
            stringify!(signal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afc) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_tuner),
            "::",
            stringify!(afc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_tuner),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_modulator {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub capability: __u32,
    pub rangelow: __u32,
    pub rangehigh: __u32,
    pub txsubchans: __u32,
    pub type_: __u32,
    pub reserved: [__u32; 3usize],
}
#[test]
fn bindgen_test_layout_v4l2_modulator() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_modulator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_modulator>(),
        68usize,
        concat!("Size of: ", stringify!(v4l2_modulator))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_modulator>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_modulator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_modulator),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_modulator),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capability) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_modulator),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangelow) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_modulator),
            "::",
            stringify!(rangelow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangehigh) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_modulator),
            "::",
            stringify!(rangehigh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).txsubchans) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_modulator),
            "::",
            stringify!(txsubchans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_modulator),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_modulator),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_frequency {
    pub tuner: __u32,
    pub type_: __u32,
    pub frequency: __u32,
    pub reserved: [__u32; 8usize],
}
#[test]
fn bindgen_test_layout_v4l2_frequency() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_frequency> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_frequency>(),
        44usize,
        concat!("Size of: ", stringify!(v4l2_frequency))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_frequency>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_frequency))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tuner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency),
            "::",
            stringify!(tuner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequency) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency),
            "::",
            stringify!(frequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_frequency_band {
    pub tuner: __u32,
    pub type_: __u32,
    pub index: __u32,
    pub capability: __u32,
    pub rangelow: __u32,
    pub rangehigh: __u32,
    pub modulation: __u32,
    pub reserved: [__u32; 9usize],
}
#[test]
fn bindgen_test_layout_v4l2_frequency_band() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_frequency_band> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_frequency_band>(),
        64usize,
        concat!("Size of: ", stringify!(v4l2_frequency_band))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_frequency_band>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_frequency_band))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tuner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency_band),
            "::",
            stringify!(tuner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency_band),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency_band),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capability) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency_band),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangelow) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency_band),
            "::",
            stringify!(rangelow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangehigh) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency_band),
            "::",
            stringify!(rangehigh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modulation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency_band),
            "::",
            stringify!(modulation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_frequency_band),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_hw_freq_seek {
    pub tuner: __u32,
    pub type_: __u32,
    pub seek_upward: __u32,
    pub wrap_around: __u32,
    pub spacing: __u32,
    pub rangelow: __u32,
    pub rangehigh: __u32,
    pub reserved: [__u32; 5usize],
}
#[test]
fn bindgen_test_layout_v4l2_hw_freq_seek() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_hw_freq_seek> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_hw_freq_seek>(),
        48usize,
        concat!("Size of: ", stringify!(v4l2_hw_freq_seek))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_hw_freq_seek>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_hw_freq_seek))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tuner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_hw_freq_seek),
            "::",
            stringify!(tuner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_hw_freq_seek),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek_upward) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_hw_freq_seek),
            "::",
            stringify!(seek_upward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrap_around) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_hw_freq_seek),
            "::",
            stringify!(wrap_around)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spacing) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_hw_freq_seek),
            "::",
            stringify!(spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangelow) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_hw_freq_seek),
            "::",
            stringify!(rangelow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangehigh) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_hw_freq_seek),
            "::",
            stringify!(rangehigh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_hw_freq_seek),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_rds_data {
    pub lsb: __u8,
    pub msb: __u8,
    pub block: __u8,
}
#[test]
fn bindgen_test_layout_v4l2_rds_data() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_rds_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_rds_data>(),
        3usize,
        concat!("Size of: ", stringify!(v4l2_rds_data))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_rds_data>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_rds_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lsb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_rds_data),
            "::",
            stringify!(lsb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msb) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_rds_data),
            "::",
            stringify!(msb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_rds_data),
            "::",
            stringify!(block)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_audio {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub capability: __u32,
    pub mode: __u32,
    pub reserved: [__u32; 2usize],
}
#[test]
fn bindgen_test_layout_v4l2_audio() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_audio> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_audio>(),
        52usize,
        concat!("Size of: ", stringify!(v4l2_audio))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_audio>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_audio))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_audio),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_audio),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capability) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_audio),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_audio),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_audio),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_audioout {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub capability: __u32,
    pub mode: __u32,
    pub reserved: [__u32; 2usize],
}
#[test]
fn bindgen_test_layout_v4l2_audioout() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_audioout> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_audioout>(),
        52usize,
        concat!("Size of: ", stringify!(v4l2_audioout))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_audioout>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_audioout))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_audioout),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_audioout),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capability) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_audioout),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_audioout),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_audioout),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_enc_idx_entry {
    pub offset: __u64,
    pub pts: __u64,
    pub length: __u32,
    pub flags: __u32,
    pub reserved: [__u32; 2usize],
}
#[test]
fn bindgen_test_layout_v4l2_enc_idx_entry() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_enc_idx_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_enc_idx_entry>(),
        32usize,
        concat!("Size of: ", stringify!(v4l2_enc_idx_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_enc_idx_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_enc_idx_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enc_idx_entry),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enc_idx_entry),
            "::",
            stringify!(pts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enc_idx_entry),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enc_idx_entry),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enc_idx_entry),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_enc_idx {
    pub entries: __u32,
    pub entries_cap: __u32,
    pub reserved: [__u32; 4usize],
    pub entry: [v4l2_enc_idx_entry; 64usize],
}
#[test]
fn bindgen_test_layout_v4l2_enc_idx() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_enc_idx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_enc_idx>(),
        2072usize,
        concat!("Size of: ", stringify!(v4l2_enc_idx))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_enc_idx>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_enc_idx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enc_idx),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries_cap) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enc_idx),
            "::",
            stringify!(entries_cap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enc_idx),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_enc_idx),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_encoder_cmd {
    pub cmd: __u32,
    pub flags: __u32,
    pub __bindgen_anon_1: v4l2_encoder_cmd__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_encoder_cmd__bindgen_ty_1 {
    pub raw: v4l2_encoder_cmd__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_encoder_cmd__bindgen_ty_1__bindgen_ty_1 {
    pub data: [__u32; 8usize],
}
#[test]
fn bindgen_test_layout_v4l2_encoder_cmd__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_encoder_cmd__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_encoder_cmd__bindgen_ty_1__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(v4l2_encoder_cmd__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_encoder_cmd__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(v4l2_encoder_cmd__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_encoder_cmd__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_encoder_cmd__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_encoder_cmd__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_encoder_cmd__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(v4l2_encoder_cmd__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_encoder_cmd__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_encoder_cmd__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_encoder_cmd__bindgen_ty_1),
            "::",
            stringify!(raw)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_encoder_cmd() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_encoder_cmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_encoder_cmd>(),
        40usize,
        concat!("Size of: ", stringify!(v4l2_encoder_cmd))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_encoder_cmd>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_encoder_cmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_encoder_cmd),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_encoder_cmd),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_decoder_cmd {
    pub cmd: __u32,
    pub flags: __u32,
    pub __bindgen_anon_1: v4l2_decoder_cmd__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_decoder_cmd__bindgen_ty_1 {
    pub stop: v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_1,
    pub start: v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2,
    pub raw: v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_1 {
    pub pts: __u64,
}
#[test]
fn bindgen_test_layout_v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2 {
    pub speed: __s32,
    pub format: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(format)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_3 {
    pub data: [__u32; 16usize],
}
#[test]
fn bindgen_test_layout_v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_3>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_decoder_cmd__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_decoder_cmd__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_decoder_cmd__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(v4l2_decoder_cmd__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_decoder_cmd__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_decoder_cmd__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_decoder_cmd__bindgen_ty_1),
            "::",
            stringify!(raw)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_decoder_cmd() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_decoder_cmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_decoder_cmd>(),
        72usize,
        concat!("Size of: ", stringify!(v4l2_decoder_cmd))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_decoder_cmd>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_decoder_cmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_decoder_cmd),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_decoder_cmd),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vbi_format {
    pub sampling_rate: __u32,
    pub offset: __u32,
    pub samples_per_line: __u32,
    pub sample_format: __u32,
    pub start: [__s32; 2usize],
    pub count: [__u32; 2usize],
    pub flags: __u32,
    pub reserved: [__u32; 2usize],
}
#[test]
fn bindgen_test_layout_v4l2_vbi_format() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_vbi_format> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_vbi_format>(),
        44usize,
        concat!("Size of: ", stringify!(v4l2_vbi_format))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_vbi_format>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_vbi_format))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling_rate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vbi_format),
            "::",
            stringify!(sampling_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vbi_format),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samples_per_line) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vbi_format),
            "::",
            stringify!(samples_per_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample_format) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vbi_format),
            "::",
            stringify!(sample_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vbi_format),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vbi_format),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vbi_format),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_vbi_format),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_sliced_vbi_format {
    pub service_set: __u16,
    pub service_lines: [[__u16; 24usize]; 2usize],
    pub io_size: __u32,
    pub reserved: [__u32; 2usize],
}
#[test]
fn bindgen_test_layout_v4l2_sliced_vbi_format() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_sliced_vbi_format> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_sliced_vbi_format>(),
        112usize,
        concat!("Size of: ", stringify!(v4l2_sliced_vbi_format))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_sliced_vbi_format>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_sliced_vbi_format))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_set) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_format),
            "::",
            stringify!(service_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_lines) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_format),
            "::",
            stringify!(service_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_size) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_format),
            "::",
            stringify!(io_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_format),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_sliced_vbi_cap {
    pub service_set: __u16,
    pub service_lines: [[__u16; 24usize]; 2usize],
    pub type_: __u32,
    pub reserved: [__u32; 3usize],
}
#[test]
fn bindgen_test_layout_v4l2_sliced_vbi_cap() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_sliced_vbi_cap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_sliced_vbi_cap>(),
        116usize,
        concat!("Size of: ", stringify!(v4l2_sliced_vbi_cap))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_sliced_vbi_cap>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_sliced_vbi_cap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_set) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_cap),
            "::",
            stringify!(service_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_lines) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_cap),
            "::",
            stringify!(service_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_cap),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_cap),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_sliced_vbi_data {
    pub id: __u32,
    pub field: __u32,
    pub line: __u32,
    pub reserved: __u32,
    pub data: [__u8; 48usize],
}
#[test]
fn bindgen_test_layout_v4l2_sliced_vbi_data() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_sliced_vbi_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_sliced_vbi_data>(),
        64usize,
        concat!("Size of: ", stringify!(v4l2_sliced_vbi_data))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_sliced_vbi_data>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_sliced_vbi_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_data),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_data),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_data),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_data),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sliced_vbi_data),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_mpeg_vbi_itv0_line {
    pub id: __u8,
    pub data: [__u8; 42usize],
}
#[test]
fn bindgen_test_layout_v4l2_mpeg_vbi_itv0_line() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_mpeg_vbi_itv0_line> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_mpeg_vbi_itv0_line>(),
        43usize,
        concat!("Size of: ", stringify!(v4l2_mpeg_vbi_itv0_line))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_mpeg_vbi_itv0_line>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_mpeg_vbi_itv0_line))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_mpeg_vbi_itv0_line),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_mpeg_vbi_itv0_line),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_mpeg_vbi_itv0 {
    pub linemask: [__le32; 2usize],
    pub line: [v4l2_mpeg_vbi_itv0_line; 35usize],
}
#[test]
fn bindgen_test_layout_v4l2_mpeg_vbi_itv0() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_mpeg_vbi_itv0> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_mpeg_vbi_itv0>(),
        1513usize,
        concat!("Size of: ", stringify!(v4l2_mpeg_vbi_itv0))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_mpeg_vbi_itv0>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_mpeg_vbi_itv0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linemask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_mpeg_vbi_itv0),
            "::",
            stringify!(linemask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_mpeg_vbi_itv0),
            "::",
            stringify!(line)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_mpeg_vbi_ITV0 {
    pub line: [v4l2_mpeg_vbi_itv0_line; 36usize],
}
#[test]
fn bindgen_test_layout_v4l2_mpeg_vbi_ITV0() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_mpeg_vbi_ITV0> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_mpeg_vbi_ITV0>(),
        1548usize,
        concat!("Size of: ", stringify!(v4l2_mpeg_vbi_ITV0))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_mpeg_vbi_ITV0>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_mpeg_vbi_ITV0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_mpeg_vbi_ITV0),
            "::",
            stringify!(line)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_mpeg_vbi_fmt_ivtv {
    pub magic: [__u8; 4usize],
    pub __bindgen_anon_1: v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1 {
    pub itv0: v4l2_mpeg_vbi_itv0,
    pub ITV0: v4l2_mpeg_vbi_ITV0,
}
#[test]
fn bindgen_test_layout_v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1>(),
        1548usize,
        concat!(
            "Size of: ",
            stringify!(v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itv0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1),
            "::",
            stringify!(itv0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ITV0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1),
            "::",
            stringify!(ITV0)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_mpeg_vbi_fmt_ivtv() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_mpeg_vbi_fmt_ivtv> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_mpeg_vbi_fmt_ivtv>(),
        1552usize,
        concat!("Size of: ", stringify!(v4l2_mpeg_vbi_fmt_ivtv))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_mpeg_vbi_fmt_ivtv>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_mpeg_vbi_fmt_ivtv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_mpeg_vbi_fmt_ivtv),
            "::",
            stringify!(magic)
        )
    );
}
#[doc = " struct v4l2_plane_pix_format - additional, per-plane format definition\n @sizeimage:\t\tmaximum size in bytes required for data, for which\n\t\t\tthis plane will be used\n @bytesperline:\tdistance in bytes between the leftmost pixels in two\n\t\t\tadjacent lines\n @reserved:\t\tdrivers and applications must zero this array"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_plane_pix_format {
    pub sizeimage: __u32,
    pub bytesperline: __u32,
    pub reserved: [__u16; 6usize],
}
#[test]
fn bindgen_test_layout_v4l2_plane_pix_format() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_plane_pix_format> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_plane_pix_format>(),
        20usize,
        concat!("Size of: ", stringify!(v4l2_plane_pix_format))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_plane_pix_format>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_plane_pix_format))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeimage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_plane_pix_format),
            "::",
            stringify!(sizeimage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesperline) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_plane_pix_format),
            "::",
            stringify!(bytesperline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_plane_pix_format),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = " struct v4l2_pix_format_mplane - multiplanar format definition\n @width:\t\timage width in pixels\n @height:\t\timage height in pixels\n @pixelformat:\tlittle endian four character code (fourcc)\n @field:\t\tenum v4l2_field; field order (for interlaced video)\n @colorspace:\t\tenum v4l2_colorspace; supplemental to pixelformat\n @plane_fmt:\t\tper-plane information\n @num_planes:\t\tnumber of planes for this format\n @flags:\t\tformat flags (V4L2_PIX_FMT_FLAG_*)\n @ycbcr_enc:\t\tenum v4l2_ycbcr_encoding, Y'CbCr encoding\n @hsv_enc:\t\tenum v4l2_hsv_encoding, HSV encoding\n @quantization:\tenum v4l2_quantization, colorspace quantization\n @xfer_func:\t\tenum v4l2_xfer_func, colorspace transfer function\n @reserved:\t\tdrivers and applications must zero this array"]
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_pix_format_mplane {
    pub width: __u32,
    pub height: __u32,
    pub pixelformat: __u32,
    pub field: __u32,
    pub colorspace: __u32,
    pub plane_fmt: [v4l2_plane_pix_format; 8usize],
    pub num_planes: __u8,
    pub flags: __u8,
    pub __bindgen_anon_1: v4l2_pix_format_mplane__bindgen_ty_1,
    pub quantization: __u8,
    pub xfer_func: __u8,
    pub reserved: [__u8; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_pix_format_mplane__bindgen_ty_1 {
    pub ycbcr_enc: __u8,
    pub hsv_enc: __u8,
}
#[test]
fn bindgen_test_layout_v4l2_pix_format_mplane__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_pix_format_mplane__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_pix_format_mplane__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(v4l2_pix_format_mplane__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_pix_format_mplane__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(v4l2_pix_format_mplane__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ycbcr_enc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane__bindgen_ty_1),
            "::",
            stringify!(ycbcr_enc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hsv_enc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane__bindgen_ty_1),
            "::",
            stringify!(hsv_enc)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_pix_format_mplane() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_pix_format_mplane> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_pix_format_mplane>(),
        192usize,
        concat!("Size of: ", stringify!(v4l2_pix_format_mplane))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_pix_format_mplane>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_pix_format_mplane))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelformat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane),
            "::",
            stringify!(pixelformat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorspace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane),
            "::",
            stringify!(colorspace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plane_fmt) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane),
            "::",
            stringify!(plane_fmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_planes) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane),
            "::",
            stringify!(num_planes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        181usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantization) as usize - ptr as usize },
        183usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane),
            "::",
            stringify!(quantization)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xfer_func) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane),
            "::",
            stringify!(xfer_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_pix_format_mplane),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = " struct v4l2_sdr_format - SDR format definition\n @pixelformat:\tlittle endian four character code (fourcc)\n @buffersize:\t\tmaximum size in bytes required for data\n @reserved:\t\tdrivers and applications must zero this array"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_sdr_format {
    pub pixelformat: __u32,
    pub buffersize: __u32,
    pub reserved: [__u8; 24usize],
}
#[test]
fn bindgen_test_layout_v4l2_sdr_format() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_sdr_format> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_sdr_format>(),
        32usize,
        concat!("Size of: ", stringify!(v4l2_sdr_format))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_sdr_format>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_sdr_format))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelformat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sdr_format),
            "::",
            stringify!(pixelformat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffersize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sdr_format),
            "::",
            stringify!(buffersize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_sdr_format),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = " struct v4l2_meta_format - metadata format definition\n @dataformat:\t\tlittle endian four character code (fourcc)\n @buffersize:\t\tmaximum size in bytes required for data"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_meta_format {
    pub dataformat: __u32,
    pub buffersize: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_meta_format() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_meta_format> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_meta_format>(),
        8usize,
        concat!("Size of: ", stringify!(v4l2_meta_format))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_meta_format>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_meta_format))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataformat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_meta_format),
            "::",
            stringify!(dataformat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffersize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_meta_format),
            "::",
            stringify!(buffersize)
        )
    );
}
#[doc = " struct v4l2_format - stream data format\n @type:\tenum v4l2_buf_type; type of the data stream\n @pix:\tdefinition of an image format\n @pix_mp:\tdefinition of a multiplanar image format\n @win:\tdefinition of an overlaid image\n @vbi:\traw VBI capture or output parameters\n @sliced:\tsliced VBI capture or output parameters\n @raw_data:\tplaceholder for future extensions and custom formats\n @fmt:\tunion of @pix, @pix_mp, @win, @vbi, @sliced, @sdr, @meta\n\t\tand @raw_data"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_format {
    pub type_: __u32,
    pub fmt: v4l2_format__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_format__bindgen_ty_1 {
    pub pix: v4l2_pix_format,
    pub pix_mp: v4l2_pix_format_mplane,
    pub win: v4l2_window,
    pub vbi: v4l2_vbi_format,
    pub sliced: v4l2_sliced_vbi_format,
    pub sdr: v4l2_sdr_format,
    pub meta: v4l2_meta_format,
    pub raw_data: [__u8; 200usize],
}
#[test]
fn bindgen_test_layout_v4l2_format__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_format__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_format__bindgen_ty_1>(),
        200usize,
        concat!("Size of: ", stringify!(v4l2_format__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_format__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_format__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pix) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_format__bindgen_ty_1),
            "::",
            stringify!(pix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pix_mp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_format__bindgen_ty_1),
            "::",
            stringify!(pix_mp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_format__bindgen_ty_1),
            "::",
            stringify!(win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vbi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_format__bindgen_ty_1),
            "::",
            stringify!(vbi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sliced) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_format__bindgen_ty_1),
            "::",
            stringify!(sliced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_format__bindgen_ty_1),
            "::",
            stringify!(sdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meta) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_format__bindgen_ty_1),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_format__bindgen_ty_1),
            "::",
            stringify!(raw_data)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_format() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_format> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_format>(),
        208usize,
        concat!("Size of: ", stringify!(v4l2_format))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_format>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_format))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_format),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_format),
            "::",
            stringify!(fmt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_streamparm {
    pub type_: __u32,
    pub parm: v4l2_streamparm__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_streamparm__bindgen_ty_1 {
    pub capture: v4l2_captureparm,
    pub output: v4l2_outputparm,
    pub raw_data: [__u8; 200usize],
}
#[test]
fn bindgen_test_layout_v4l2_streamparm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_streamparm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_streamparm__bindgen_ty_1>(),
        200usize,
        concat!("Size of: ", stringify!(v4l2_streamparm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_streamparm__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_streamparm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capture) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_streamparm__bindgen_ty_1),
            "::",
            stringify!(capture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_streamparm__bindgen_ty_1),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_streamparm__bindgen_ty_1),
            "::",
            stringify!(raw_data)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_streamparm() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_streamparm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_streamparm>(),
        204usize,
        concat!("Size of: ", stringify!(v4l2_streamparm))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_streamparm>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_streamparm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_streamparm),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parm) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_streamparm),
            "::",
            stringify!(parm)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_event_vsync {
    pub field: __u8,
}
#[test]
fn bindgen_test_layout_v4l2_event_vsync() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_event_vsync> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_event_vsync>(),
        1usize,
        concat!("Size of: ", stringify!(v4l2_event_vsync))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_event_vsync>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_event_vsync))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_vsync),
            "::",
            stringify!(field)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_event_ctrl {
    pub changes: __u32,
    pub type_: __u32,
    pub __bindgen_anon_1: v4l2_event_ctrl__bindgen_ty_1,
    pub flags: __u32,
    pub minimum: __s32,
    pub maximum: __s32,
    pub step: __s32,
    pub default_value: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_event_ctrl__bindgen_ty_1 {
    pub value: __s32,
    pub value64: __s64,
}
#[test]
fn bindgen_test_layout_v4l2_event_ctrl__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_event_ctrl__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_event_ctrl__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(v4l2_event_ctrl__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_event_ctrl__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_event_ctrl__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_ctrl__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_ctrl__bindgen_ty_1),
            "::",
            stringify!(value64)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_event_ctrl() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_event_ctrl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_event_ctrl>(),
        40usize,
        concat!("Size of: ", stringify!(v4l2_event_ctrl))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_event_ctrl>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_event_ctrl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_ctrl),
            "::",
            stringify!(changes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_ctrl),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_ctrl),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimum) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_ctrl),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_ctrl),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_ctrl),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_ctrl),
            "::",
            stringify!(default_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_event_frame_sync {
    pub frame_sequence: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_event_frame_sync() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_event_frame_sync> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_event_frame_sync>(),
        4usize,
        concat!("Size of: ", stringify!(v4l2_event_frame_sync))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_event_frame_sync>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_event_frame_sync))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_sequence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_frame_sync),
            "::",
            stringify!(frame_sequence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_event_src_change {
    pub changes: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_event_src_change() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_event_src_change> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_event_src_change>(),
        4usize,
        concat!("Size of: ", stringify!(v4l2_event_src_change))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_event_src_change>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_event_src_change))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_src_change),
            "::",
            stringify!(changes)
        )
    );
}
#[doc = " struct v4l2_event_motion_det - motion detection event\n @flags:             if V4L2_EVENT_MD_FL_HAVE_FRAME_SEQ is set, then the\n                     frame_sequence field is valid.\n @frame_sequence:    the frame sequence number associated with this event.\n @region_mask:       which regions detected motion."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_event_motion_det {
    pub flags: __u32,
    pub frame_sequence: __u32,
    pub region_mask: __u32,
}
#[test]
fn bindgen_test_layout_v4l2_event_motion_det() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_event_motion_det> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_event_motion_det>(),
        12usize,
        concat!("Size of: ", stringify!(v4l2_event_motion_det))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_event_motion_det>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_event_motion_det))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_motion_det),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_sequence) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_motion_det),
            "::",
            stringify!(frame_sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).region_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_motion_det),
            "::",
            stringify!(region_mask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_event {
    pub type_: __u32,
    pub u: v4l2_event__bindgen_ty_1,
    pub pending: __u32,
    pub sequence: __u32,
    pub timestamp: timespec,
    pub id: __u32,
    pub reserved: [__u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_event__bindgen_ty_1 {
    pub vsync: v4l2_event_vsync,
    pub ctrl: v4l2_event_ctrl,
    pub frame_sync: v4l2_event_frame_sync,
    pub src_change: v4l2_event_src_change,
    pub motion_det: v4l2_event_motion_det,
    pub data: [__u8; 64usize],
}
#[test]
fn bindgen_test_layout_v4l2_event__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_event__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_event__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(v4l2_event__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_event__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_event__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vsync) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event__bindgen_ty_1),
            "::",
            stringify!(vsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event__bindgen_ty_1),
            "::",
            stringify!(ctrl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_sync) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event__bindgen_ty_1),
            "::",
            stringify!(frame_sync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_change) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event__bindgen_ty_1),
            "::",
            stringify!(src_change)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motion_det) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event__bindgen_ty_1),
            "::",
            stringify!(motion_det)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_event() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_event>(),
        136usize,
        concat!("Size of: ", stringify!(v4l2_event))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_event>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_event_subscription {
    pub type_: __u32,
    pub id: __u32,
    pub flags: __u32,
    pub reserved: [__u32; 5usize],
}
#[test]
fn bindgen_test_layout_v4l2_event_subscription() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_event_subscription> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_event_subscription>(),
        32usize,
        concat!("Size of: ", stringify!(v4l2_event_subscription))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_event_subscription>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_event_subscription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_subscription),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_subscription),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_subscription),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_event_subscription),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_dbg_match {
    pub type_: __u32,
    pub __bindgen_anon_1: v4l2_dbg_match__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_dbg_match__bindgen_ty_1 {
    pub addr: __u32,
    pub name: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_v4l2_dbg_match__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_dbg_match__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_dbg_match__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(v4l2_dbg_match__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_dbg_match__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(v4l2_dbg_match__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dbg_match__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dbg_match__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
}
#[test]
fn bindgen_test_layout_v4l2_dbg_match() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_dbg_match> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_dbg_match>(),
        36usize,
        concat!("Size of: ", stringify!(v4l2_dbg_match))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_dbg_match>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_dbg_match))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dbg_match),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_dbg_register {
    pub match_: v4l2_dbg_match,
    pub size: __u32,
    pub reg: __u64,
    pub val: __u64,
}
#[test]
fn bindgen_test_layout_v4l2_dbg_register() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_dbg_register> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_dbg_register>(),
        56usize,
        concat!("Size of: ", stringify!(v4l2_dbg_register))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_dbg_register>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_dbg_register))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dbg_register),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dbg_register),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dbg_register),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dbg_register),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_dbg_chip_info {
    pub match_: v4l2_dbg_match,
    pub name: [::std::os::raw::c_char; 32usize],
    pub flags: __u32,
    pub reserved: [__u32; 32usize],
}
#[test]
fn bindgen_test_layout_v4l2_dbg_chip_info() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_dbg_chip_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_dbg_chip_info>(),
        200usize,
        concat!("Size of: ", stringify!(v4l2_dbg_chip_info))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_dbg_chip_info>(),
        1usize,
        concat!("Alignment of ", stringify!(v4l2_dbg_chip_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dbg_chip_info),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dbg_chip_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dbg_chip_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_dbg_chip_info),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = " struct v4l2_create_buffers - VIDIOC_CREATE_BUFS argument\n @index:\ton return, index of the first created buffer\n @count:\tentry: number of requested buffers,\n\t\treturn: number of created buffers\n @memory:\tenum v4l2_memory; buffer memory type\n @format:\tframe format, for which buffers are requested\n @capabilities: capabilities of this buffer type.\n @reserved:\tfuture extensions"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_create_buffers {
    pub index: __u32,
    pub count: __u32,
    pub memory: __u32,
    pub format: v4l2_format,
    pub capabilities: __u32,
    pub reserved: [__u32; 7usize],
}
#[test]
fn bindgen_test_layout_v4l2_create_buffers() {
    const UNINIT: ::std::mem::MaybeUninit<v4l2_create_buffers> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<v4l2_create_buffers>(),
        256usize,
        concat!("Size of: ", stringify!(v4l2_create_buffers))
    );
    assert_eq!(
        ::std::mem::align_of::<v4l2_create_buffers>(),
        8usize,
        concat!("Alignment of ", stringify!(v4l2_create_buffers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_create_buffers),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_create_buffers),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_create_buffers),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_create_buffers),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_create_buffers),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(v4l2_create_buffers),
            "::",
            stringify!(reserved)
        )
    );
}
